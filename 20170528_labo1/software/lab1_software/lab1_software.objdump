
lab1_software.elf:     file format elf32-littlenios2
lab1_software.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0001022c

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x00002ff4 memsz 0x00002ff4 flags r-x
    LOAD off    0x00004014 vaddr 0x00013014 paddr 0x00014670 align 2**12
         filesz 0x0000165c memsz 0x0000165c flags rw-
    LOAD off    0x00005ccc vaddr 0x00015ccc paddr 0x00015ccc align 2**12
         filesz 0x00000000 memsz 0x00000120 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000020c  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00002d98  0001022c  0001022c  0000122c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000050  00012fc4  00012fc4  00003fc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       0000165c  00013014  00014670  00004014  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000120  00015ccc  00015ccc  00005ccc  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_mem   00000000  00015dec  00015dec  00005670  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00005670  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000005f8  00000000  00000000  00005698  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00007caa  00000000  00000000  00005c90  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002c0f  00000000  00000000  0000d93a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00002c97  00000000  00000000  00010549  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000d94  00000000  00000000  000131e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001e1c  00000000  00000000  00013f74  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000a8a  00000000  00000000  00015d90  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  0001681c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000128  00000000  00000000  00016830  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0001879b  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0001879e  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000187a1  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000187a2  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  000187a3  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  000187a7  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  000187ab  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  000187af  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  000187ba  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  000187c5  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000006  00000000  00000000  000187d0  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000027  00000000  00000000  000187d6  2**0
                  CONTENTS, READONLY
 29 .jdi          0000383f  00000000  00000000  000187fd  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00053d1d  00000000  00000000  0001c03c  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
0001022c l    d  .text	00000000 .text
00012fc4 l    d  .rodata	00000000 .rodata
00013014 l    d  .rwdata	00000000 .rwdata
00015ccc l    d  .bss	00000000 .bss
00015dec l    d  .onchip_mem	00000000 .onchip_mem
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../lab1_software_bsp//obj/HAL/src/crt0.o
00010264 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
00012fcc l     O .rodata	00000010 SSEG_HEX_TABLE.1469
00014640 l     O .rwdata	00000001 led_pattern.1516
00014641 l     O .rwdata	00000001 led_pattern.1528
00000000 l    df *ABS*	00000000 lib2-divmod.c
00010af8 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_load.c
00010c4c l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00010da8 l     F .text	00000038 alt_dev_reg
00013014 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0001109c l     F .text	00000204 altera_avalon_jtag_uart_irq
000112a0 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
000118c0 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
00011afc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00011c40 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00011c6c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00012104 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0001225c l     F .text	00000050 alt_get_errno
000122ac l     F .text	000000f4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
0001421c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00015ce4 g     O .bss	00000004 alt_instruction_exception_handler
00010d30 g     F .text	00000078 alt_main
00015cec g     O .bss	00000100 alt_irq
00014670 g       *ABS*	00000000 __flash_rwdata_start
000102bc g     F .text	0000007c sseg_disp_4_digit
0001271c g     F .text	00000020 altera_nios2_gen2_irq_init
00000000  w      *UND*	00000000 __errno
00010840 g     F .text	00000040 restart_timer
00010000 g     F .entry	0000000c __reset
00010020 g       *ABS*	00000000 __flash_exceptions_start
00015ce8 g     O .bss	00000004 errno
00015cd0 g     O .bss	00000004 alt_argv
0001c640 g       *ABS*	00000000 _gp
000106bc g     F .text	00000088 juart_write_string
0001409c g     O .rwdata	00000180 alt_fd_list
0001273c g     F .text	00000090 alt_find_dev
00012b18 g     F .text	00000138 memcpy
000121e4 g     F .text	00000078 alt_io_redirect
00012fc4 g       *ABS*	00000000 __DTOR_END__
000129b4 g     F .text	0000009c alt_exception_cause_generated_bad_addr
000105a4 g     F .text	00000038 get_switches
0001048c g     F .text	00000090 display_pause
0001149c g     F .text	0000020c altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00010c14 g     F .text	00000008 .hidden __udivsi3
00014654 g     O .rwdata	00000004 alt_max_fd
00014668 g     O .rwdata	00000004 _global_impure_ptr
00015dec g       *ABS*	00000000 __bss_end
00012014 g     F .text	000000f0 alt_iic_isr_register
00012618 g     F .text	00000104 alt_tick
00011fc8 g     F .text	0000004c alt_ic_irq_enabled
00012580 g     F .text	00000098 alt_alarm_stop
00015cd8 g     O .bss	00000004 alt_irq_active
00010000 g       *ABS*	00000000 __alt_mem_onchip_mem
000100fc g     F .exceptions	000000d0 alt_irq_handler
00014074 g     O .rwdata	00000028 alt_dev_null
00011c24 g     F .text	0000001c alt_dcache_flush_all
000107fc g     F .text	00000044 timer_is_done
00014670 g       *ABS*	00000000 __ram_rwdata_end
0001464c g     O .rwdata	00000008 alt_dev_list
00013014 g       *ABS*	00000000 __ram_rodata_end
00010c1c g     F .text	00000008 .hidden __umodsi3
0001051c g     F .text	00000088 display_all_off
00015dec g       *ABS*	00000000 end
00010fd8 g     F .text	000000c4 altera_avalon_jtag_uart_init
000101cc g     F .exceptions	00000060 alt_instruction_exception_entry
00012fc4 g       *ABS*	00000000 __CTOR_LIST__
00020000 g       *ABS*	00000000 __alt_stack_pointer
00011934 g     F .text	00000088 alt_avalon_timer_sc_init
000116a8 g     F .text	00000218 altera_avalon_jtag_uart_write
00012dfc g     F .text	00000194 __call_exitprocs
0001022c g     F .text	0000003c _start
00015cdc g     O .bss	00000004 _alt_tick_rate
00015ce0 g     O .bss	00000004 _alt_nticks
00010e14 g     F .text	00000060 alt_sys_init
00012ce8 g     F .text	00000114 __register_exitproc
000105dc g     F .text	00000078 led_flash
00011348 g     F .text	00000068 altera_avalon_jtag_uart_close
00010c24 g     F .text	00000028 .hidden __mulsi3
00013014 g       *ABS*	00000000 __ram_rwdata_start
00012fc4 g       *ABS*	00000000 __ram_rodata_start
00010e74 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
000128e0 g     F .text	000000d4 alt_get_fd
00012a9c g     F .text	0000007c memcmp
00010f34 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00015dec g       *ABS*	00000000 __alt_stack_base
00010f84 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00010338 g     F .text	00000154 display_int_to_sseg
000127cc g     F .text	00000114 alt_find_file
00011cbc g     F .text	000000a4 alt_dev_llist_insert
00010744 g     F .text	00000074 timer_write_period
00015ccc g       *ABS*	00000000 __bss_start
00010880 g     F .text	00000278 main
00015cd4 g     O .bss	00000004 alt_envp
00010ed4 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00014658 g     O .rwdata	00000004 alt_errno
00010680 g     F .text	0000003c inverting_leds
00010b64 g     F .text	00000054 .hidden __divsi3
00012fc4 g       *ABS*	00000000 __CTOR_END__
00012fc4 g       *ABS*	00000000 __flash_rodata_start
00012fc4 g       *ABS*	00000000 __DTOR_LIST__
00010de0 g     F .text	00000034 alt_irq_init
00012500 g     F .text	00000080 alt_release_fd
00012a50 g     F .text	00000014 atexit
0001466c g     O .rwdata	00000004 _impure_ptr
00015ccc g     O .bss	00000004 alt_argc
00011dbc g     F .text	0000005c _do_dtors
00010268 g     F .text	00000054 sseg_conv_hex
00010020 g       .exceptions	00000000 alt_irq_entry
00014644 g     O .rwdata	00000008 alt_fs_list
00010020 g       *ABS*	00000000 __ram_exceptions_start
00011e34 g     F .text	00000050 alt_ic_isr_register
00010654 g     F .text	0000002c all_leds_off
00014670 g       *ABS*	00000000 _edata
00015dec g       *ABS*	00000000 _end
0001022c g       *ABS*	00000000 __ram_exceptions_end
000113b0 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
00011f24 g     F .text	000000a4 alt_ic_irq_disable
00012a64 g     F .text	00000038 exit
00010bb8 g     F .text	0000005c .hidden __modsi3
00020000 g       *ABS*	00000000 __alt_data_end
00010020 g     F .exceptions	00000000 alt_exception
00012f90 g     F .text	00000034 _exit
000119bc g     F .text	00000140 alt_alarm_start
00012c50 g     F .text	00000098 strlen
000123a0 g     F .text	00000160 open
00011e18 g     F .text	0000001c alt_icache_flush_all
0001465c g     O .rwdata	00000004 alt_priority_mask
00011e84 g     F .text	000000a0 alt_ic_irq_enable
000107b8 g     F .text	00000044 ms_to_nb_of_steps
00014660 g     O .rwdata	00000008 alt_alarm_list
00011d60 g     F .text	0000005c _do_ctors
00011b4c g     F .text	000000d8 close
00010cb0 g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free



Disassembly of section .entry:

00010000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10000:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10004:	08408b14 	ori	at,at,556
    jmp r1
   10008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00010020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   10020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   10024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   10028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   1002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   10030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   10034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   10038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   1003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   10040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   10044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   10048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   1004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   10050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   10054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   10058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   1005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   10060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   10064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   10068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   1006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   10070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   10074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   10078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   1007c:	10000326 	beq	r2,zero,1008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   10080:	20000226 	beq	r4,zero,1008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   10084:	00100fc0 	call	100fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   10088:	00000706 	br	100a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   1008c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   10090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   10094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   10098:	00101cc0 	call	101cc <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   1009c:	1000021e 	bne	r2,zero,100a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   100a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   100a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   100a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   100ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   100b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   100b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   100b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   100bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   100c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   100c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   100c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   100cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   100d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   100d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   100d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   100dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   100e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   100e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   100e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   100ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   100f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   100f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   100f8:	ef80083a 	eret

000100fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   100fc:	defff904 	addi	sp,sp,-28
   10100:	dfc00615 	stw	ra,24(sp)
   10104:	df000515 	stw	fp,20(sp)
   10108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   1010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   10110:	0005313a 	rdctl	r2,ipending
   10114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   10118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   1011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   10120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   10124:	00800044 	movi	r2,1
   10128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   1012c:	e0fffb17 	ldw	r3,-20(fp)
   10130:	e0bffc17 	ldw	r2,-16(fp)
   10134:	1884703a 	and	r2,r3,r2
   10138:	10001426 	beq	r2,zero,1018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   1013c:	00800074 	movhi	r2,1
   10140:	10973b04 	addi	r2,r2,23788
   10144:	e0fffd17 	ldw	r3,-12(fp)
   10148:	180690fa 	slli	r3,r3,3
   1014c:	10c5883a 	add	r2,r2,r3
   10150:	10c00017 	ldw	r3,0(r2)
   10154:	00800074 	movhi	r2,1
   10158:	10973b04 	addi	r2,r2,23788
   1015c:	e13ffd17 	ldw	r4,-12(fp)
   10160:	200890fa 	slli	r4,r4,3
   10164:	21000104 	addi	r4,r4,4
   10168:	1105883a 	add	r2,r2,r4
   1016c:	10800017 	ldw	r2,0(r2)
   10170:	1009883a 	mov	r4,r2
   10174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   10178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   1017c:	0005313a 	rdctl	r2,ipending
   10180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   10184:	e0bfff17 	ldw	r2,-4(fp)
   10188:	00000706 	br	101a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   1018c:	e0bffc17 	ldw	r2,-16(fp)
   10190:	1085883a 	add	r2,r2,r2
   10194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   10198:	e0bffd17 	ldw	r2,-12(fp)
   1019c:	10800044 	addi	r2,r2,1
   101a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   101a4:	003fe106 	br	1012c <__alt_data_end+0xffff012c>

    active = alt_irq_pending ();
   101a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   101ac:	e0bffb17 	ldw	r2,-20(fp)
   101b0:	103fdb1e 	bne	r2,zero,10120 <__alt_data_end+0xffff0120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   101b4:	0001883a 	nop
}
   101b8:	e037883a 	mov	sp,fp
   101bc:	dfc00117 	ldw	ra,4(sp)
   101c0:	df000017 	ldw	fp,0(sp)
   101c4:	dec00204 	addi	sp,sp,8
   101c8:	f800283a 	ret

000101cc <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   101cc:	defffb04 	addi	sp,sp,-20
   101d0:	dfc00415 	stw	ra,16(sp)
   101d4:	df000315 	stw	fp,12(sp)
   101d8:	df000304 	addi	fp,sp,12
   101dc:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
   101e0:	00bfffc4 	movi	r2,-1
   101e4:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
   101e8:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   101ec:	d0a5a917 	ldw	r2,-26972(gp)
   101f0:	10000726 	beq	r2,zero,10210 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   101f4:	d0a5a917 	ldw	r2,-26972(gp)
   101f8:	e0fffd17 	ldw	r3,-12(fp)
   101fc:	1809883a 	mov	r4,r3
   10200:	e17fff17 	ldw	r5,-4(fp)
   10204:	e1bffe17 	ldw	r6,-8(fp)
   10208:	103ee83a 	callr	r2
   1020c:	00000206 	br	10218 <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   10210:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   10214:	0005883a 	mov	r2,zero
}
   10218:	e037883a 	mov	sp,fp
   1021c:	dfc00117 	ldw	ra,4(sp)
   10220:	df000017 	ldw	fp,0(sp)
   10224:	dec00204 	addi	sp,sp,8
   10228:	f800283a 	ret

Disassembly of section .text:

0001022c <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   1022c:	06c000b4 	movhi	sp,2
    ori sp, sp, %lo(__alt_stack_pointer)
   10230:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   10234:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
   10238:	d6b19014 	ori	gp,gp,50752
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   1023c:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   10240:	10973314 	ori	r2,r2,23756

    movhi r3, %hi(__bss_end)
   10244:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   10248:	18d77b14 	ori	r3,r3,24044

    beq r2, r3, 1f
   1024c:	10c00326 	beq	r2,r3,1025c <_start+0x30>

0:
    stw zero, (r2)
   10250:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   10254:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   10258:	10fffd36 	bltu	r2,r3,10250 <__alt_data_end+0xffff0250>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   1025c:	0010cb00 	call	10cb0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   10260:	0010d300 	call	10d30 <alt_main>

00010264 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   10264:	003fff06 	br	10264 <__alt_data_end+0xffff0264>

00010268 <sseg_conv_hex>:
	sseg_disp_4_digit(SSEG_1_4_BASE, message); //equivalent message[0]
*/


alt_u8 sseg_conv_hex(int hex)
{
   10268:	defffd04 	addi	sp,sp,-12
   1026c:	df000215 	stw	fp,8(sp)
   10270:	df000204 	addi	fp,sp,8
   10274:	e13fff15 	stw	r4,-4(fp)
			0x40, 0x79, 0x24, 0x30, 0x19, 0x92, 0x02, 0x78, 0x00, 0x10, // 0-9
			0x88, 0x03, 0x46, 0x21, 0x06, 0x0E};						// a-f

	alt_u8 pattern;

	if (hex < 16) {
   10278:	e0bfff17 	ldw	r2,-4(fp)
   1027c:	10800408 	cmpgei	r2,r2,16
   10280:	1000071e 	bne	r2,zero,102a0 <sseg_conv_hex+0x38>
		pattern = SSEG_HEX_TABLE[hex];
   10284:	00800074 	movhi	r2,1
   10288:	108bf304 	addi	r2,r2,12236
   1028c:	e0ffff17 	ldw	r3,-4(fp)
   10290:	10c5883a 	add	r2,r2,r3
   10294:	10800003 	ldbu	r2,0(r2)
   10298:	e0bffe05 	stb	r2,-8(fp)
   1029c:	00000206 	br	102a8 <sseg_conv_hex+0x40>
	} else {
		pattern = 0xff; //tous eteint
   102a0:	00bfffc4 	movi	r2,-1
   102a4:	e0bffe05 	stb	r2,-8(fp)
	}
	return (pattern);
   102a8:	e0bffe03 	ldbu	r2,-8(fp)
}
   102ac:	e037883a 	mov	sp,fp
   102b0:	df000017 	ldw	fp,0(sp)
   102b4:	dec00104 	addi	sp,sp,4
   102b8:	f800283a 	ret

000102bc <sseg_disp_4_digit>:


void sseg_disp_4_digit(alt_u32 base, alt_u8 *digit)
{
   102bc:	defffb04 	addi	sp,sp,-20
   102c0:	df000415 	stw	fp,16(sp)
   102c4:	df000404 	addi	fp,sp,16
   102c8:	e13ffe15 	stw	r4,-8(fp)
   102cc:	e17fff15 	stw	r5,-4(fp)
	/* digit est l'adresse d'un tableau de 4 alt_u8 */

	alt_u32 sseg_data = 0;
   102d0:	e03ffc15 	stw	zero,-16(fp)
	int i;

	/* assemblage de 4 donnees par OR et decalage pour former un 32 bit */
	for(i = 0; i < 4; i++){
   102d4:	e03ffd15 	stw	zero,-12(fp)
   102d8:	00000d06 	br	10310 <sseg_disp_4_digit+0x54>
		sseg_data = (sseg_data << 8) | *digit;
   102dc:	e0bffc17 	ldw	r2,-16(fp)
   102e0:	1006923a 	slli	r3,r2,8
   102e4:	e0bfff17 	ldw	r2,-4(fp)
   102e8:	10800003 	ldbu	r2,0(r2)
   102ec:	10803fcc 	andi	r2,r2,255
   102f0:	1884b03a 	or	r2,r3,r2
   102f4:	e0bffc15 	stw	r2,-16(fp)
		digit++;
   102f8:	e0bfff17 	ldw	r2,-4(fp)
   102fc:	10800044 	addi	r2,r2,1
   10300:	e0bfff15 	stw	r2,-4(fp)

	alt_u32 sseg_data = 0;
	int i;

	/* assemblage de 4 donnees par OR et decalage pour former un 32 bit */
	for(i = 0; i < 4; i++){
   10304:	e0bffd17 	ldw	r2,-12(fp)
   10308:	10800044 	addi	r2,r2,1
   1030c:	e0bffd15 	stw	r2,-12(fp)
   10310:	e0bffd17 	ldw	r2,-12(fp)
   10314:	10800110 	cmplti	r2,r2,4
   10318:	103ff01e 	bne	r2,zero,102dc <__alt_data_end+0xffff02dc>
		sseg_data = (sseg_data << 8) | *digit;
		digit++;
	}
	pio_write(base,sseg_data);
   1031c:	e0bffe17 	ldw	r2,-8(fp)
   10320:	e0fffc17 	ldw	r3,-16(fp)
   10324:	10c00035 	stwio	r3,0(r2)
}
   10328:	e037883a 	mov	sp,fp
   1032c:	df000017 	ldw	fp,0(sp)
   10330:	dec00104 	addi	sp,sp,4
   10334:	f800283a 	ret

00010338 <display_int_to_sseg>:

void display_int_to_sseg(int number)
{
   10338:	defffa04 	addi	sp,sp,-24
   1033c:	dfc00515 	stw	ra,20(sp)
   10340:	df000415 	stw	fp,16(sp)
   10344:	df000404 	addi	fp,sp,16
   10348:	e13fff15 	stw	r4,-4(fp)
	alt_u8 message[4];


	//Pour Display sur le hex3.
	int i = 0;
   1034c:	e03ffc15 	stw	zero,-16(fp)
	while(number >= 1000)
   10350:	00000606 	br	1036c <display_int_to_sseg+0x34>
	{
		i++;
   10354:	e0bffc17 	ldw	r2,-16(fp)
   10358:	10800044 	addi	r2,r2,1
   1035c:	e0bffc15 	stw	r2,-16(fp)
		number -= 1000;
   10360:	e0bfff17 	ldw	r2,-4(fp)
   10364:	10bf0604 	addi	r2,r2,-1000
   10368:	e0bfff15 	stw	r2,-4(fp)
	alt_u8 message[4];


	//Pour Display sur le hex3.
	int i = 0;
	while(number >= 1000)
   1036c:	e0bfff17 	ldw	r2,-4(fp)
   10370:	1080fa08 	cmpgei	r2,r2,1000
   10374:	103ff71e 	bne	r2,zero,10354 <__alt_data_end+0xffff0354>
		i++;
		number -= 1000;

	}
	//display i  on hex3.
	message[0] = sseg_conv_hex(i);
   10378:	e13ffc17 	ldw	r4,-16(fp)
   1037c:	00102680 	call	10268 <sseg_conv_hex>
   10380:	e0bffd05 	stb	r2,-12(fp)
	i = 0;
   10384:	e03ffc15 	stw	zero,-16(fp)
	while(number >= 100)
   10388:	00000606 	br	103a4 <display_int_to_sseg+0x6c>
	{
		i++;
   1038c:	e0bffc17 	ldw	r2,-16(fp)
   10390:	10800044 	addi	r2,r2,1
   10394:	e0bffc15 	stw	r2,-16(fp)
		number -= 100;
   10398:	e0bfff17 	ldw	r2,-4(fp)
   1039c:	10bfe704 	addi	r2,r2,-100
   103a0:	e0bfff15 	stw	r2,-4(fp)

	}
	//display i  on hex3.
	message[0] = sseg_conv_hex(i);
	i = 0;
	while(number >= 100)
   103a4:	e0bfff17 	ldw	r2,-4(fp)
   103a8:	10801908 	cmpgei	r2,r2,100
   103ac:	103ff71e 	bne	r2,zero,1038c <__alt_data_end+0xffff038c>
	{
		i++;
		number -= 100;
	}
	//display i  on hex2.
	message[1] = sseg_conv_hex(i);
   103b0:	e13ffc17 	ldw	r4,-16(fp)
   103b4:	00102680 	call	10268 <sseg_conv_hex>
   103b8:	e0bffd45 	stb	r2,-11(fp)
	i = 0;
   103bc:	e03ffc15 	stw	zero,-16(fp)
	while(number >= 10)
   103c0:	00000606 	br	103dc <display_int_to_sseg+0xa4>
	{
		i++;
   103c4:	e0bffc17 	ldw	r2,-16(fp)
   103c8:	10800044 	addi	r2,r2,1
   103cc:	e0bffc15 	stw	r2,-16(fp)
		number -= 10;
   103d0:	e0bfff17 	ldw	r2,-4(fp)
   103d4:	10bffd84 	addi	r2,r2,-10
   103d8:	e0bfff15 	stw	r2,-4(fp)
		number -= 100;
	}
	//display i  on hex2.
	message[1] = sseg_conv_hex(i);
	i = 0;
	while(number >= 10)
   103dc:	e0bfff17 	ldw	r2,-4(fp)
   103e0:	10800288 	cmpgei	r2,r2,10
   103e4:	103ff71e 	bne	r2,zero,103c4 <__alt_data_end+0xffff03c4>
	{
		i++;
		number -= 10;
	}
	//display i  on hex1.
	message[2] = sseg_conv_hex(i);
   103e8:	e13ffc17 	ldw	r4,-16(fp)
   103ec:	00102680 	call	10268 <sseg_conv_hex>
   103f0:	e0bffd85 	stb	r2,-10(fp)
	i = 0;
   103f4:	e03ffc15 	stw	zero,-16(fp)
	while(number >= 1)
   103f8:	00000606 	br	10414 <display_int_to_sseg+0xdc>
	{
		i++;
   103fc:	e0bffc17 	ldw	r2,-16(fp)
   10400:	10800044 	addi	r2,r2,1
   10404:	e0bffc15 	stw	r2,-16(fp)
		number -= 1;
   10408:	e0bfff17 	ldw	r2,-4(fp)
   1040c:	10bfffc4 	addi	r2,r2,-1
   10410:	e0bfff15 	stw	r2,-4(fp)
		number -= 10;
	}
	//display i  on hex1.
	message[2] = sseg_conv_hex(i);
	i = 0;
	while(number >= 1)
   10414:	e0bfff17 	ldw	r2,-4(fp)
   10418:	00bff816 	blt	zero,r2,103fc <__alt_data_end+0xffff03fc>
	{
		i++;
		number -= 1;
	}
	//display i  on hex0.
	message[3] = sseg_conv_hex(i);
   1041c:	e13ffc17 	ldw	r4,-16(fp)
   10420:	00102680 	call	10268 <sseg_conv_hex>
   10424:	e0bffdc5 	stb	r2,-9(fp)
	sseg_disp_4_digit(SSEG_1_4_BASE, message); //equivalent message[0]
   10428:	e0bffd04 	addi	r2,fp,-12
   1042c:	010000b4 	movhi	r4,2
   10430:	21041004 	addi	r4,r4,4160
   10434:	100b883a 	mov	r5,r2
   10438:	00102bc0 	call	102bc <sseg_disp_4_digit>

	alt_u8 message1[4];

	message1[0] = sseg_conv_hex(0x01);//no hex here...
   1043c:	01000044 	movi	r4,1
   10440:	00102680 	call	10268 <sseg_conv_hex>
   10444:	e0bffe05 	stb	r2,-8(fp)
	message1[1] = sseg_conv_hex(0x02);//no hex here...
   10448:	01000084 	movi	r4,2
   1044c:	00102680 	call	10268 <sseg_conv_hex>
   10450:	e0bffe45 	stb	r2,-7(fp)
	message1[2] = 0x40;//hex5 -> OFF
   10454:	00801004 	movi	r2,64
   10458:	e0bffe85 	stb	r2,-6(fp)
	message1[3] = 0x40;//hex4 -> OFF
   1045c:	00801004 	movi	r2,64
   10460:	e0bffec5 	stb	r2,-5(fp)
	sseg_disp_4_digit(SSEG_5_6_BASE, message1); //equivalent message[0]
   10464:	e0bffe04 	addi	r2,fp,-8
   10468:	010000b4 	movhi	r4,2
   1046c:	21040c04 	addi	r4,r4,4144
   10470:	100b883a 	mov	r5,r2
   10474:	00102bc0 	call	102bc <sseg_disp_4_digit>

}
   10478:	e037883a 	mov	sp,fp
   1047c:	dfc00117 	ldw	ra,4(sp)
   10480:	df000017 	ldw	fp,0(sp)
   10484:	dec00204 	addi	sp,sp,8
   10488:	f800283a 	ret

0001048c <display_pause>:

void display_pause(void)
{
   1048c:	defffc04 	addi	sp,sp,-16
   10490:	dfc00315 	stw	ra,12(sp)
   10494:	df000215 	stw	fp,8(sp)
   10498:	df000204 	addi	fp,sp,8
	alt_u8 message[4];

	message[0] = 0x41;//hex3 -> U
   1049c:	00801044 	movi	r2,65
   104a0:	e0bffe05 	stb	r2,-8(fp)
	message[1] = 0x12;//hex2 -> S
   104a4:	00800484 	movi	r2,18
   104a8:	e0bffe45 	stb	r2,-7(fp)
	message[2] = 0x06;//hex1 -> E
   104ac:	00800184 	movi	r2,6
   104b0:	e0bffe85 	stb	r2,-6(fp)
	message[3] = 0xff;//hex0 -> OFF.
   104b4:	00bfffc4 	movi	r2,-1
   104b8:	e0bffec5 	stb	r2,-5(fp)
	sseg_disp_4_digit(SSEG_1_4_BASE, message); //equivalent message[0]
   104bc:	010000b4 	movhi	r4,2
   104c0:	21041004 	addi	r4,r4,4160
   104c4:	e17ffe04 	addi	r5,fp,-8
   104c8:	00102bc0 	call	102bc <sseg_disp_4_digit>

	alt_u8 message1[4];

	message1[0] = sseg_conv_hex(0x01);
   104cc:	01000044 	movi	r4,1
   104d0:	00102680 	call	10268 <sseg_conv_hex>
   104d4:	e0bfff05 	stb	r2,-4(fp)
	message1[1] = sseg_conv_hex(0x02);
   104d8:	01000084 	movi	r4,2
   104dc:	00102680 	call	10268 <sseg_conv_hex>
   104e0:	e0bfff45 	stb	r2,-3(fp)
	message1[2] = 0x0c;//hex5 -> P
   104e4:	00800304 	movi	r2,12
   104e8:	e0bfff85 	stb	r2,-2(fp)
	message1[3] = 0x88;//hex4 -> A
   104ec:	00bfe204 	movi	r2,-120
   104f0:	e0bfffc5 	stb	r2,-1(fp)
	sseg_disp_4_digit(SSEG_5_6_BASE, message1); //equivalent message[0]
   104f4:	e0bfff04 	addi	r2,fp,-4
   104f8:	010000b4 	movhi	r4,2
   104fc:	21040c04 	addi	r4,r4,4144
   10500:	100b883a 	mov	r5,r2
   10504:	00102bc0 	call	102bc <sseg_disp_4_digit>
}
   10508:	e037883a 	mov	sp,fp
   1050c:	dfc00117 	ldw	ra,4(sp)
   10510:	df000017 	ldw	fp,0(sp)
   10514:	dec00204 	addi	sp,sp,8
   10518:	f800283a 	ret

0001051c <display_all_off>:

//usefull for debugging
void display_all_off(void)
{
   1051c:	defffc04 	addi	sp,sp,-16
   10520:	dfc00315 	stw	ra,12(sp)
   10524:	df000215 	stw	fp,8(sp)
   10528:	df000204 	addi	fp,sp,8
	alt_u8 message[4];

		message[0] = 0xff;//OFF
   1052c:	00bfffc4 	movi	r2,-1
   10530:	e0bffe05 	stb	r2,-8(fp)
		message[1] = 0xff;
   10534:	00bfffc4 	movi	r2,-1
   10538:	e0bffe45 	stb	r2,-7(fp)
		message[2] = 0xff;
   1053c:	00bfffc4 	movi	r2,-1
   10540:	e0bffe85 	stb	r2,-6(fp)
		message[3] = 0xff;
   10544:	00bfffc4 	movi	r2,-1
   10548:	e0bffec5 	stb	r2,-5(fp)
		sseg_disp_4_digit(SSEG_1_4_BASE, message); //equivalent message[0]
   1054c:	010000b4 	movhi	r4,2
   10550:	21041004 	addi	r4,r4,4160
   10554:	e17ffe04 	addi	r5,fp,-8
   10558:	00102bc0 	call	102bc <sseg_disp_4_digit>

		alt_u8 message1[4];

		message1[0] = 0xff;
   1055c:	00bfffc4 	movi	r2,-1
   10560:	e0bfff05 	stb	r2,-4(fp)
		message1[1] = 0xff;
   10564:	00bfffc4 	movi	r2,-1
   10568:	e0bfff45 	stb	r2,-3(fp)
		message1[2] = 0xff;
   1056c:	00bfffc4 	movi	r2,-1
   10570:	e0bfff85 	stb	r2,-2(fp)
		message1[3] = 0xff;
   10574:	00bfffc4 	movi	r2,-1
   10578:	e0bfffc5 	stb	r2,-1(fp)
		sseg_disp_4_digit(SSEG_5_6_BASE, message1); //equivalent message[0]
   1057c:	e0bfff04 	addi	r2,fp,-4
   10580:	010000b4 	movhi	r4,2
   10584:	21040c04 	addi	r4,r4,4144
   10588:	100b883a 	mov	r5,r2
   1058c:	00102bc0 	call	102bc <sseg_disp_4_digit>
}
   10590:	e037883a 	mov	sp,fp
   10594:	dfc00117 	ldw	ra,4(sp)
   10598:	df000017 	ldw	fp,0(sp)
   1059c:	dec00204 	addi	sp,sp,8
   105a0:	f800283a 	ret

000105a4 <get_switches>:

#ifndef LED_DRIVER_H_
#define LED_DRIVER_H_

void get_switches(alt_u32 sw_base, int *period)
{
   105a4:	defffd04 	addi	sp,sp,-12
   105a8:	df000215 	stw	fp,8(sp)
   105ac:	df000204 	addi	fp,sp,8
   105b0:	e13ffe15 	stw	r4,-8(fp)
   105b4:	e17fff15 	stw	r5,-4(fp)
	*period = IORD(sw_base, 0) & 0x000003FF;
   105b8:	e0bffe17 	ldw	r2,-8(fp)
   105bc:	10800037 	ldwio	r2,0(r2)
   105c0:	10c0ffcc 	andi	r3,r2,1023
   105c4:	e0bfff17 	ldw	r2,-4(fp)
   105c8:	10c00015 	stw	r3,0(r2)
}
   105cc:	e037883a 	mov	sp,fp
   105d0:	df000017 	ldw	fp,0(sp)
   105d4:	dec00104 	addi	sp,sp,4
   105d8:	f800283a 	ret

000105dc <led_flash>:

void led_flash(alt_u32 led_base, int period)
{
   105dc:	defffa04 	addi	sp,sp,-24
   105e0:	dfc00515 	stw	ra,20(sp)
   105e4:	df000415 	stw	fp,16(sp)
   105e8:	df000404 	addi	fp,sp,16
   105ec:	e13ffe15 	stw	r4,-8(fp)
   105f0:	e17fff15 	stw	r5,-4(fp)
	static alt_u8 led_pattern = 0x01;

	alt_u32 i, itr;

	led_pattern ^= 0x03;
   105f4:	d0a00003 	ldbu	r2,-32768(gp)
   105f8:	108000dc 	xori	r2,r2,3
   105fc:	d0a00005 	stb	r2,-32768(gp)
	IOWR(led_base, 0, led_pattern);
   10600:	e0bffe17 	ldw	r2,-8(fp)
   10604:	d0e00003 	ldbu	r3,-32768(gp)
   10608:	18c03fcc 	andi	r3,r3,255
   1060c:	10c00035 	stwio	r3,0(r2)
	itr = period * 2000;
   10610:	e13fff17 	ldw	r4,-4(fp)
   10614:	0141f404 	movi	r5,2000
   10618:	0010c240 	call	10c24 <__mulsi3>
   1061c:	e0bffd15 	stw	r2,-12(fp)
	for(i = 0; i < itr; i++)
   10620:	e03ffc15 	stw	zero,-16(fp)
   10624:	00000306 	br	10634 <led_flash+0x58>
   10628:	e0bffc17 	ldw	r2,-16(fp)
   1062c:	10800044 	addi	r2,r2,1
   10630:	e0bffc15 	stw	r2,-16(fp)
   10634:	e0fffc17 	ldw	r3,-16(fp)
   10638:	e0bffd17 	ldw	r2,-12(fp)
   1063c:	18bffa36 	bltu	r3,r2,10628 <__alt_data_end+0xffff0628>
	{
		;;
	}
}
   10640:	e037883a 	mov	sp,fp
   10644:	dfc00117 	ldw	ra,4(sp)
   10648:	df000017 	ldw	fp,0(sp)
   1064c:	dec00204 	addi	sp,sp,8
   10650:	f800283a 	ret

00010654 <all_leds_off>:

void all_leds_off(void){
   10654:	deffff04 	addi	sp,sp,-4
   10658:	df000015 	stw	fp,0(sp)
   1065c:	d839883a 	mov	fp,sp
	IOWR(LEDS_BASE, 0, 0x00);//Leds Off when writing 0.
   10660:	0007883a 	mov	r3,zero
   10664:	008000b4 	movhi	r2,2
   10668:	10841404 	addi	r2,r2,4176
   1066c:	10c00035 	stwio	r3,0(r2)
}
   10670:	e037883a 	mov	sp,fp
   10674:	df000017 	ldw	fp,0(sp)
   10678:	dec00104 	addi	sp,sp,4
   1067c:	f800283a 	ret

00010680 <inverting_leds>:


void inverting_leds (alt_u32 led_base){
   10680:	defffe04 	addi	sp,sp,-8
   10684:	df000115 	stw	fp,4(sp)
   10688:	df000104 	addi	fp,sp,4
   1068c:	e13fff15 	stw	r4,-4(fp)
	static alt_u8 led_pattern = 0x01;//original pattern. Since its static, this line is executed only once.
	led_pattern ^= 0x03;
   10690:	d0a00043 	ldbu	r2,-32767(gp)
   10694:	108000dc 	xori	r2,r2,3
   10698:	d0a00045 	stb	r2,-32767(gp)
	IOWR(led_base, 0, led_pattern);
   1069c:	e0bfff17 	ldw	r2,-4(fp)
   106a0:	d0e00043 	ldbu	r3,-32767(gp)
   106a4:	18c03fcc 	andi	r3,r3,255
   106a8:	10c00035 	stwio	r3,0(r2)
}
   106ac:	e037883a 	mov	sp,fp
   106b0:	df000017 	ldw	fp,0(sp)
   106b4:	dec00104 	addi	sp,sp,4
   106b8:	f800283a 	ret

000106bc <juart_write_string>:
#define juart_write_char(base, data) \
	IOWR(base, JUART_DATA_REG_OFT, data & JUART_CHAR_MASK)

/* routine pour l'envoi d'une chaine de characteres. methode "busy-waiting" */
void juart_write_string(alt_u32 jtag_base, char *message)
{
   106bc:	defffc04 	addi	sp,sp,-16
   106c0:	df000315 	stw	fp,12(sp)
   106c4:	df000304 	addi	fp,sp,12
   106c8:	e13ffe15 	stw	r4,-8(fp)
   106cc:	e17fff15 	stw	r5,-4(fp)
	// message est une cstr (chaine de charactere terminee par NUL)
	alt_u32 data32;

	while(*message != '\0') {
   106d0:	00001206 	br	1071c <juart_write_string+0x60>
		data32 = (alt_u32) *message;
   106d4:	e0bfff17 	ldw	r2,-4(fp)
   106d8:	10800003 	ldbu	r2,0(r2)
   106dc:	10803fcc 	andi	r2,r2,255
   106e0:	1080201c 	xori	r2,r2,128
   106e4:	10bfe004 	addi	r2,r2,-128
   106e8:	e0bffd15 	stw	r2,-12(fp)
		if(juart_read_wspace(jtag_base) != 0) {
   106ec:	e0bffe17 	ldw	r2,-8(fp)
   106f0:	10800104 	addi	r2,r2,4
   106f4:	10800037 	ldwio	r2,0(r2)
   106f8:	1004d43a 	srli	r2,r2,16
   106fc:	10000426 	beq	r2,zero,10710 <juart_write_string+0x54>
			juart_write_char(jtag_base, data32);
   10700:	e0bffe17 	ldw	r2,-8(fp)
   10704:	e0fffd17 	ldw	r3,-12(fp)
   10708:	18c03fcc 	andi	r3,r3,255
   1070c:	10c00035 	stwio	r3,0(r2)
		}
			message++; // ERREUR CORRIGEE ;)
   10710:	e0bfff17 	ldw	r2,-4(fp)
   10714:	10800044 	addi	r2,r2,1
   10718:	e0bfff15 	stw	r2,-4(fp)
void juart_write_string(alt_u32 jtag_base, char *message)
{
	// message est une cstr (chaine de charactere terminee par NUL)
	alt_u32 data32;

	while(*message != '\0') {
   1071c:	e0bfff17 	ldw	r2,-4(fp)
   10720:	10800003 	ldbu	r2,0(r2)
   10724:	10803fcc 	andi	r2,r2,255
   10728:	1080201c 	xori	r2,r2,128
   1072c:	10bfe004 	addi	r2,r2,-128
   10730:	103fe81e 	bne	r2,zero,106d4 <__alt_data_end+0xffff06d4>
		if(juart_read_wspace(jtag_base) != 0) {
			juart_write_char(jtag_base, data32);
		}
			message++; // ERREUR CORRIGEE ;)
	}
}
   10734:	e037883a 	mov	sp,fp
   10738:	df000017 	ldw	fp,0(sp)
   1073c:	dec00104 	addi	sp,sp,4
   10740:	f800283a 	ret

00010744 <timer_write_period>:
// ^ buggais donc j'ai fait des fonctions customs...

/* routine de configuration */
/* cette fonction programme la periode et lance le compteur */
void timer_write_period(alt_u32 timer_base, alt_u32 period)
{
   10744:	defffc04 	addi	sp,sp,-16
   10748:	df000315 	stw	fp,12(sp)
   1074c:	df000304 	addi	fp,sp,12
   10750:	e13ffe15 	stw	r4,-8(fp)
   10754:	e17fff15 	stw	r5,-4(fp)
	alt_u16 high, low;

	/* separer la periode 32bits en 2 valeurs de 16 bits */
	high = (alt_u16) (period >> 16);
   10758:	e0bfff17 	ldw	r2,-4(fp)
   1075c:	1004d43a 	srli	r2,r2,16
   10760:	e0bffd0d 	sth	r2,-12(fp)
	low = (alt_u16) (period & 0x0000FFFF);
   10764:	e0bfff17 	ldw	r2,-4(fp)
   10768:	e0bffd8d 	sth	r2,-10(fp)

	/*ecrire la periode */
	IOWR(timer_base, TIMER_PERIODH_REG_OFT, high);
   1076c:	e0bffe17 	ldw	r2,-8(fp)
   10770:	10800304 	addi	r2,r2,12
   10774:	1007883a 	mov	r3,r2
   10778:	e0bffd0b 	ldhu	r2,-12(fp)
   1077c:	18800035 	stwio	r2,0(r3)
	IOWR(timer_base, TIMER_PERIODL_REG_OFT, low);
   10780:	e0bffe17 	ldw	r2,-8(fp)
   10784:	10800204 	addi	r2,r2,8
   10788:	1007883a 	mov	r3,r2
   1078c:	e0bffd8b 	ldhu	r2,-10(fp)
   10790:	18800035 	stwio	r2,0(r3)

	/* configuration du timer pour demarrage, SANS le mode continu, SANS interrupt */
	IOWR(timer_base, TIMER_CTRL_REG_OFT, 0x0004); //bit 2 active seulement
   10794:	e0bffe17 	ldw	r2,-8(fp)
   10798:	10800104 	addi	r2,r2,4
   1079c:	1007883a 	mov	r3,r2
   107a0:	00800104 	movi	r2,4
   107a4:	18800035 	stwio	r2,0(r3)
	// code a l'air d'etre correct afterall?
}
   107a8:	e037883a 	mov	sp,fp
   107ac:	df000017 	ldw	fp,0(sp)
   107b0:	dec00104 	addi	sp,sp,4
   107b4:	f800283a 	ret

000107b8 <ms_to_nb_of_steps>:

alt_u32 ms_to_nb_of_steps(int period_in_ms){
   107b8:	defffd04 	addi	sp,sp,-12
   107bc:	dfc00215 	stw	ra,8(sp)
   107c0:	df000115 	stw	fp,4(sp)
   107c4:	df000104 	addi	fp,sp,4
   107c8:	e13fff15 	stw	r4,-4(fp)
	//Formulae is Period(in Milli seconds) = X * 20us
	//We want to find X.

	return (period_in_ms*1000000/20);//Pour division complete sans reste.
   107cc:	e13fff17 	ldw	r4,-4(fp)
   107d0:	014003f4 	movhi	r5,15
   107d4:	29509004 	addi	r5,r5,16960
   107d8:	0010c240 	call	10c24 <__mulsi3>
   107dc:	1009883a 	mov	r4,r2
   107e0:	01400504 	movi	r5,20
   107e4:	0010b640 	call	10b64 <__divsi3>
}
   107e8:	e037883a 	mov	sp,fp
   107ec:	dfc00117 	ldw	ra,4(sp)
   107f0:	df000017 	ldw	fp,0(sp)
   107f4:	dec00204 	addi	sp,sp,8
   107f8:	f800283a 	ret

000107fc <timer_is_done>:

// read_timer fct. Return 1 if timer is done, 0 if running.
alt_u32 timer_is_done(alt_u32 timer_base){
   107fc:	defffd04 	addi	sp,sp,-12
   10800:	df000215 	stw	fp,8(sp)
   10804:	df000204 	addi	fp,sp,8
   10808:	e13fff15 	stw	r4,-4(fp)
	alt_u32 timer_done = IORD(timer_base, TIMER_STAT_REG_OFT);
   1080c:	e0bfff17 	ldw	r2,-4(fp)
   10810:	10800037 	ldwio	r2,0(r2)
   10814:	e0bffe15 	stw	r2,-8(fp)
	if(timer_done == 1)
   10818:	e0bffe17 	ldw	r2,-8(fp)
   1081c:	10800058 	cmpnei	r2,r2,1
   10820:	1000021e 	bne	r2,zero,1082c <timer_is_done+0x30>
	{
		return 1;
   10824:	00800044 	movi	r2,1
   10828:	00000106 	br	10830 <timer_is_done+0x34>
	} else {
		return 0;
   1082c:	0005883a 	mov	r2,zero
	}
}
   10830:	e037883a 	mov	sp,fp
   10834:	df000017 	ldw	fp,0(sp)
   10838:	dec00104 	addi	sp,sp,4
   1083c:	f800283a 	ret

00010840 <restart_timer>:

void restart_timer(alt_u32 timer_base){
   10840:	defffe04 	addi	sp,sp,-8
   10844:	df000115 	stw	fp,4(sp)
   10848:	df000104 	addi	fp,sp,4
   1084c:	e13fff15 	stw	r4,-4(fp)
	//reset 1sec timer
	IOWR(TIMER_0_BASE, TIMER_STAT_REG_OFT, 0);
   10850:	0007883a 	mov	r3,zero
   10854:	008000b4 	movhi	r2,2
   10858:	10840004 	addi	r2,r2,4096
   1085c:	10c00035 	stwio	r3,0(r2)
	//start timer again
	IOWR(TIMER_0_BASE, TIMER_CTRL_REG_OFT, 4);
   10860:	00c00104 	movi	r3,4
   10864:	008000b4 	movhi	r2,2
   10868:	10840104 	addi	r2,r2,4100
   1086c:	10c00035 	stwio	r3,0(r2)
}
   10870:	e037883a 	mov	sp,fp
   10874:	df000017 	ldw	fp,0(sp)
   10878:	dec00104 	addi	sp,sp,4
   1087c:	f800283a 	ret

00010880 <main>:
#include "button_reader.h"
#include "jtag_driver.h"
#include "interval_timer_driver.h"

int main(void)
{
   10880:	defff404 	addi	sp,sp,-48
   10884:	dfc00b15 	stw	ra,44(sp)
   10888:	df000a15 	stw	fp,40(sp)
   1088c:	df000a04 	addi	fp,sp,40

	// Necessaire puisque au depart tout les edges sont active pour une raison...
	//RISING Edge est selectionne dans Qsys.
	clear_all_edge_capture;
   10890:	00c003c4 	movi	r3,15
   10894:	008000b4 	movhi	r2,2
   10898:	10840b04 	addi	r2,r2,4140
   1089c:	10c00035 	stwio	r3,0(r2)

	//led flashing, default 500ms.
	int period_ms = 500;
   108a0:	00807d04 	movi	r2,500
   108a4:	e0bffd15 	stw	r2,-12(fp)

	//Configuration du interval timer
	timer_write_period(TIMER_0_BASE, ms_to_nb_of_steps(period_ms));
   108a8:	e0bffd17 	ldw	r2,-12(fp)
   108ac:	1009883a 	mov	r4,r2
   108b0:	00107b80 	call	107b8 <ms_to_nb_of_steps>
   108b4:	010000b4 	movhi	r4,2
   108b8:	21040004 	addi	r4,r4,4096
   108bc:	100b883a 	mov	r5,r2
   108c0:	00107440 	call	10744 <timer_write_period>

	//Display initial period value on sseg
	display_int_to_sseg(period_ms);
   108c4:	e0bffd17 	ldw	r2,-12(fp)
   108c8:	1009883a 	mov	r4,r2
   108cc:	00103380 	call	10338 <display_int_to_sseg>


	//Systeme mode, 0 pour Pause, 1 pour Running. Default, Running.
	int system_running = 1;
   108d0:	00800044 	movi	r2,1
   108d4:	e0bff615 	stw	r2,-40(fp)

	while(1)
	{

		//RUN
		while(system_running)
   108d8:	00007206 	br	10aa4 <main+0x224>
		{

			//Avec interval timer.
			// if timer is done.
			if(timer_is_done(TIMER_0_BASE))
   108dc:	010000b4 	movhi	r4,2
   108e0:	21040004 	addi	r4,r4,4096
   108e4:	00107fc0 	call	107fc <timer_is_done>
   108e8:	10000626 	beq	r2,zero,10904 <main+0x84>
			{
				//inverting LEDs
				inverting_leds(LEDS_BASE);
   108ec:	010000b4 	movhi	r4,2
   108f0:	21041404 	addi	r4,r4,4176
   108f4:	00106800 	call	10680 <inverting_leds>
				//reset timer new fct
				restart_timer(TIMER_0_BASE);
   108f8:	010000b4 	movhi	r4,2
   108fc:	21040004 	addi	r4,r4,4096
   10900:	00108400 	call	10840 <restart_timer>
			}

			//Nouvelle position
			if(edge_capture & key1_pressed)
   10904:	008000b4 	movhi	r2,2
   10908:	10840b04 	addi	r2,r2,4140
   1090c:	10800037 	ldwio	r2,0(r2)
   10910:	1080008c 	andi	r2,r2,2
   10914:	10005926 	beq	r2,zero,10a7c <main+0x1fc>
			{
				//Lecture des switches sw0 a sw9
				get_switches(SWITCHES_BASE, &period_ms);
   10918:	e0bffd04 	addi	r2,fp,-12
   1091c:	010000b4 	movhi	r4,2
   10920:	21041804 	addi	r4,r4,4192
   10924:	100b883a 	mov	r5,r2
   10928:	00105a40 	call	105a4 <get_switches>

				//Display de la periode sur 7-seg.
				display_int_to_sseg(period_ms);
   1092c:	e0bffd17 	ldw	r2,-12(fp)
   10930:	1009883a 	mov	r4,r2
   10934:	00103380 	call	10338 <display_int_to_sseg>

				//New config of the timer
				timer_write_period(TIMER_0_BASE, ms_to_nb_of_steps(period_ms));
   10938:	e0bffd17 	ldw	r2,-12(fp)
   1093c:	1009883a 	mov	r4,r2
   10940:	00107b80 	call	107b8 <ms_to_nb_of_steps>
   10944:	010000b4 	movhi	r4,2
   10948:	21040004 	addi	r4,r4,4096
   1094c:	100b883a 	mov	r5,r2
   10950:	00107440 	call	10744 <timer_write_period>

				//Clear the edgedetection on key1
				clear_key1;
   10954:	00c00084 	movi	r3,2
   10958:	008000b4 	movhi	r2,2
   1095c:	10840b04 	addi	r2,r2,4140
   10960:	10c00035 	stwio	r3,0(r2)
				//building string_to_send1
				char string_to_send1[5];

//Need mallocs to wrap in nice function... I think //////////////////////////////////////////////////////////////////////////////
				//converting period from int to char*.
				int temp = period_ms; //pour ne pas affecter la periode.
   10964:	e0bffd17 	ldw	r2,-12(fp)
   10968:	e0bff715 	stw	r2,-36(fp)

				int thousands=0; //indique le nombre de milliers dans period
   1096c:	e03ff815 	stw	zero,-32(fp)
				while(temp >= 1000){
   10970:	00000606 	br	1098c <main+0x10c>
					thousands++;
   10974:	e0bff817 	ldw	r2,-32(fp)
   10978:	10800044 	addi	r2,r2,1
   1097c:	e0bff815 	stw	r2,-32(fp)
					temp -= 1000;
   10980:	e0bff717 	ldw	r2,-36(fp)
   10984:	10bf0604 	addi	r2,r2,-1000
   10988:	e0bff715 	stw	r2,-36(fp)
//Need mallocs to wrap in nice function... I think //////////////////////////////////////////////////////////////////////////////
				//converting period from int to char*.
				int temp = period_ms; //pour ne pas affecter la periode.

				int thousands=0; //indique le nombre de milliers dans period
				while(temp >= 1000){
   1098c:	e0bff717 	ldw	r2,-36(fp)
   10990:	1080fa08 	cmpgei	r2,r2,1000
   10994:	103ff71e 	bne	r2,zero,10974 <__alt_data_end+0xffff0974>
					thousands++;
					temp -= 1000;
				}
				string_to_send1[0] = (char)thousands +'0'; //conversion d'un int en char.
   10998:	e0bff817 	ldw	r2,-32(fp)
   1099c:	10800c04 	addi	r2,r2,48
   109a0:	e0bffe05 	stb	r2,-8(fp)

				int hundreds=0; //indique le nombre de centiers dans period
   109a4:	e03ff915 	stw	zero,-28(fp)
				while(temp >= 100){
   109a8:	00000606 	br	109c4 <main+0x144>
					hundreds++;
   109ac:	e0bff917 	ldw	r2,-28(fp)
   109b0:	10800044 	addi	r2,r2,1
   109b4:	e0bff915 	stw	r2,-28(fp)
					temp -= 100;
   109b8:	e0bff717 	ldw	r2,-36(fp)
   109bc:	10bfe704 	addi	r2,r2,-100
   109c0:	e0bff715 	stw	r2,-36(fp)
					temp -= 1000;
				}
				string_to_send1[0] = (char)thousands +'0'; //conversion d'un int en char.

				int hundreds=0; //indique le nombre de centiers dans period
				while(temp >= 100){
   109c4:	e0bff717 	ldw	r2,-36(fp)
   109c8:	10801908 	cmpgei	r2,r2,100
   109cc:	103ff71e 	bne	r2,zero,109ac <__alt_data_end+0xffff09ac>
					hundreds++;
					temp -= 100;
				}
				string_to_send1[1] = (char)hundreds +'0'; //conversion d'un int en char.
   109d0:	e0bff917 	ldw	r2,-28(fp)
   109d4:	10800c04 	addi	r2,r2,48
   109d8:	e0bffe45 	stb	r2,-7(fp)

				int tens=0; //indique le nombre de dizaines dans period
   109dc:	e03ffa15 	stw	zero,-24(fp)
				while(temp >= 10){
   109e0:	00000606 	br	109fc <main+0x17c>
					tens++;
   109e4:	e0bffa17 	ldw	r2,-24(fp)
   109e8:	10800044 	addi	r2,r2,1
   109ec:	e0bffa15 	stw	r2,-24(fp)
					temp -= 10;
   109f0:	e0bff717 	ldw	r2,-36(fp)
   109f4:	10bffd84 	addi	r2,r2,-10
   109f8:	e0bff715 	stw	r2,-36(fp)
					temp -= 100;
				}
				string_to_send1[1] = (char)hundreds +'0'; //conversion d'un int en char.

				int tens=0; //indique le nombre de dizaines dans period
				while(temp >= 10){
   109fc:	e0bff717 	ldw	r2,-36(fp)
   10a00:	10800288 	cmpgei	r2,r2,10
   10a04:	103ff71e 	bne	r2,zero,109e4 <__alt_data_end+0xffff09e4>
					tens++;
					temp -= 10;
				}
				string_to_send1[2] = (char)tens +'0'; //conversion d'un int en char.
   10a08:	e0bffa17 	ldw	r2,-24(fp)
   10a0c:	10800c04 	addi	r2,r2,48
   10a10:	e0bffe85 	stb	r2,-6(fp)

				int units=0; //indique le nombre d'unite dans period
   10a14:	e03ffb15 	stw	zero,-20(fp)
				while(temp >= 1){
   10a18:	00000606 	br	10a34 <main+0x1b4>
					units++;
   10a1c:	e0bffb17 	ldw	r2,-20(fp)
   10a20:	10800044 	addi	r2,r2,1
   10a24:	e0bffb15 	stw	r2,-20(fp)
					temp -= 1;
   10a28:	e0bff717 	ldw	r2,-36(fp)
   10a2c:	10bfffc4 	addi	r2,r2,-1
   10a30:	e0bff715 	stw	r2,-36(fp)
					temp -= 10;
				}
				string_to_send1[2] = (char)tens +'0'; //conversion d'un int en char.

				int units=0; //indique le nombre d'unite dans period
				while(temp >= 1){
   10a34:	e0bff717 	ldw	r2,-36(fp)
   10a38:	00bff816 	blt	zero,r2,10a1c <__alt_data_end+0xffff0a1c>
					units++;
					temp -= 1;
				}
				string_to_send1[3] = (char)units +'0'; //conversion d'un int en char.
   10a3c:	e0bffb17 	ldw	r2,-20(fp)
   10a40:	10800c04 	addi	r2,r2,48
   10a44:	e0bffec5 	stb	r2,-5(fp)

				string_to_send1[4] = '\0'; //to terminate string. Takes care of weird characters.
   10a48:	e03fff05 	stb	zero,-4(fp)
///////////////////////////////////////////////////////////////////////////////////////////////////////////
				  // Now str contains the integer as characters
				char * string_to_send2 =  " ms \n\r\0";
   10a4c:	00800074 	movhi	r2,1
   10a50:	108bf104 	addi	r2,r2,12228
   10a54:	e0bffc15 	stw	r2,-16(fp)
				juart_write_string(JTAG_UART_0_BASE, string_to_send1);
   10a58:	e0bffe04 	addi	r2,fp,-8
   10a5c:	010000b4 	movhi	r4,2
   10a60:	21041c04 	addi	r4,r4,4208
   10a64:	100b883a 	mov	r5,r2
   10a68:	00106bc0 	call	106bc <juart_write_string>
				juart_write_string(JTAG_UART_0_BASE, string_to_send2);
   10a6c:	010000b4 	movhi	r4,2
   10a70:	21041c04 	addi	r4,r4,4208
   10a74:	e17ffc17 	ldw	r5,-16(fp)
   10a78:	00106bc0 	call	106bc <juart_write_string>

			}
			//Exiting RUN mode.
			if(edge_capture & key0_pressed)
   10a7c:	008000b4 	movhi	r2,2
   10a80:	10840b04 	addi	r2,r2,4140
   10a84:	10800037 	ldwio	r2,0(r2)
   10a88:	1080004c 	andi	r2,r2,1
   10a8c:	10000526 	beq	r2,zero,10aa4 <main+0x224>
			{
				system_running = 0;
   10a90:	e03ff615 	stw	zero,-40(fp)
				clear_key0;
   10a94:	00c00044 	movi	r3,1
   10a98:	008000b4 	movhi	r2,2
   10a9c:	10840b04 	addi	r2,r2,4140
   10aa0:	10c00035 	stwio	r3,0(r2)

	while(1)
	{

		//RUN
		while(system_running)
   10aa4:	e0bff617 	ldw	r2,-40(fp)
   10aa8:	103f8c1e 	bne	r2,zero,108dc <__alt_data_end+0xffff08dc>
				system_running = 0;
				clear_key0;
			}
		}
		//PAUSE
		while(!system_running)
   10aac:	00000f06 	br	10aec <main+0x26c>
		{
			display_pause();
   10ab0:	001048c0 	call	1048c <display_pause>
			//Re-entering RUN mode.
			if(edge_capture & key0_pressed)
   10ab4:	008000b4 	movhi	r2,2
   10ab8:	10840b04 	addi	r2,r2,4140
   10abc:	10800037 	ldwio	r2,0(r2)
   10ac0:	1080004c 	andi	r2,r2,1
   10ac4:	10000926 	beq	r2,zero,10aec <main+0x26c>
			{
				//Display initial period value on sseg
				display_int_to_sseg(period_ms);
   10ac8:	e0bffd17 	ldw	r2,-12(fp)
   10acc:	1009883a 	mov	r4,r2
   10ad0:	00103380 	call	10338 <display_int_to_sseg>
				//Remet le system en running mode
				system_running = 1;
   10ad4:	00800044 	movi	r2,1
   10ad8:	e0bff615 	stw	r2,-40(fp)

				clear_key0;
   10adc:	00c00044 	movi	r3,1
   10ae0:	008000b4 	movhi	r2,2
   10ae4:	10840b04 	addi	r2,r2,4140
   10ae8:	10c00035 	stwio	r3,0(r2)
				system_running = 0;
				clear_key0;
			}
		}
		//PAUSE
		while(!system_running)
   10aec:	e0bff617 	ldw	r2,-40(fp)
   10af0:	103fef26 	beq	r2,zero,10ab0 <__alt_data_end+0xffff0ab0>
				clear_key0;
			}
		}


	}
   10af4:	003f7806 	br	108d8 <__alt_data_end+0xffff08d8>

00010af8 <udivmodsi4>:
   10af8:	2900182e 	bgeu	r5,r4,10b5c <udivmodsi4+0x64>
   10afc:	28001716 	blt	r5,zero,10b5c <udivmodsi4+0x64>
   10b00:	00800804 	movi	r2,32
   10b04:	00c00044 	movi	r3,1
   10b08:	00000206 	br	10b14 <udivmodsi4+0x1c>
   10b0c:	10001126 	beq	r2,zero,10b54 <udivmodsi4+0x5c>
   10b10:	28000516 	blt	r5,zero,10b28 <udivmodsi4+0x30>
   10b14:	294b883a 	add	r5,r5,r5
   10b18:	10bfffc4 	addi	r2,r2,-1
   10b1c:	18c7883a 	add	r3,r3,r3
   10b20:	293ffa36 	bltu	r5,r4,10b0c <__alt_data_end+0xffff0b0c>
   10b24:	18000b26 	beq	r3,zero,10b54 <udivmodsi4+0x5c>
   10b28:	0005883a 	mov	r2,zero
   10b2c:	21400236 	bltu	r4,r5,10b38 <udivmodsi4+0x40>
   10b30:	2149c83a 	sub	r4,r4,r5
   10b34:	10c4b03a 	or	r2,r2,r3
   10b38:	1806d07a 	srli	r3,r3,1
   10b3c:	280ad07a 	srli	r5,r5,1
   10b40:	183ffa1e 	bne	r3,zero,10b2c <__alt_data_end+0xffff0b2c>
   10b44:	3000011e 	bne	r6,zero,10b4c <udivmodsi4+0x54>
   10b48:	f800283a 	ret
   10b4c:	2005883a 	mov	r2,r4
   10b50:	f800283a 	ret
   10b54:	0005883a 	mov	r2,zero
   10b58:	003ffa06 	br	10b44 <__alt_data_end+0xffff0b44>
   10b5c:	00c00044 	movi	r3,1
   10b60:	003ff106 	br	10b28 <__alt_data_end+0xffff0b28>

00010b64 <__divsi3>:
   10b64:	defffe04 	addi	sp,sp,-8
   10b68:	dfc00115 	stw	ra,4(sp)
   10b6c:	dc000015 	stw	r16,0(sp)
   10b70:	20000b16 	blt	r4,zero,10ba0 <__divsi3+0x3c>
   10b74:	0021883a 	mov	r16,zero
   10b78:	28000c16 	blt	r5,zero,10bac <__divsi3+0x48>
   10b7c:	000d883a 	mov	r6,zero
   10b80:	0010af80 	call	10af8 <udivmodsi4>
   10b84:	0407c83a 	sub	r3,zero,r16
   10b88:	1884f03a 	xor	r2,r3,r2
   10b8c:	1405883a 	add	r2,r2,r16
   10b90:	dfc00117 	ldw	ra,4(sp)
   10b94:	dc000017 	ldw	r16,0(sp)
   10b98:	dec00204 	addi	sp,sp,8
   10b9c:	f800283a 	ret
   10ba0:	0109c83a 	sub	r4,zero,r4
   10ba4:	04000044 	movi	r16,1
   10ba8:	283ff40e 	bge	r5,zero,10b7c <__alt_data_end+0xffff0b7c>
   10bac:	014bc83a 	sub	r5,zero,r5
   10bb0:	8400005c 	xori	r16,r16,1
   10bb4:	003ff106 	br	10b7c <__alt_data_end+0xffff0b7c>

00010bb8 <__modsi3>:
   10bb8:	defffd04 	addi	sp,sp,-12
   10bbc:	dfc00215 	stw	ra,8(sp)
   10bc0:	dc400115 	stw	r17,4(sp)
   10bc4:	dc000015 	stw	r16,0(sp)
   10bc8:	20000c16 	blt	r4,zero,10bfc <__modsi3+0x44>
   10bcc:	0023883a 	mov	r17,zero
   10bd0:	0021883a 	mov	r16,zero
   10bd4:	28000d16 	blt	r5,zero,10c0c <__modsi3+0x54>
   10bd8:	01800044 	movi	r6,1
   10bdc:	0010af80 	call	10af8 <udivmodsi4>
   10be0:	1404f03a 	xor	r2,r2,r16
   10be4:	8885883a 	add	r2,r17,r2
   10be8:	dfc00217 	ldw	ra,8(sp)
   10bec:	dc400117 	ldw	r17,4(sp)
   10bf0:	dc000017 	ldw	r16,0(sp)
   10bf4:	dec00304 	addi	sp,sp,12
   10bf8:	f800283a 	ret
   10bfc:	0109c83a 	sub	r4,zero,r4
   10c00:	04400044 	movi	r17,1
   10c04:	043fffc4 	movi	r16,-1
   10c08:	283ff30e 	bge	r5,zero,10bd8 <__alt_data_end+0xffff0bd8>
   10c0c:	014bc83a 	sub	r5,zero,r5
   10c10:	003ff106 	br	10bd8 <__alt_data_end+0xffff0bd8>

00010c14 <__udivsi3>:
   10c14:	000d883a 	mov	r6,zero
   10c18:	0010af81 	jmpi	10af8 <udivmodsi4>

00010c1c <__umodsi3>:
   10c1c:	01800044 	movi	r6,1
   10c20:	0010af81 	jmpi	10af8 <udivmodsi4>

00010c24 <__mulsi3>:
   10c24:	0005883a 	mov	r2,zero
   10c28:	20000726 	beq	r4,zero,10c48 <__mulsi3+0x24>
   10c2c:	20c0004c 	andi	r3,r4,1
   10c30:	2008d07a 	srli	r4,r4,1
   10c34:	18000126 	beq	r3,zero,10c3c <__mulsi3+0x18>
   10c38:	1145883a 	add	r2,r2,r5
   10c3c:	294b883a 	add	r5,r5,r5
   10c40:	203ffa1e 	bne	r4,zero,10c2c <__alt_data_end+0xffff0c2c>
   10c44:	f800283a 	ret
   10c48:	f800283a 	ret

00010c4c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   10c4c:	defffc04 	addi	sp,sp,-16
   10c50:	df000315 	stw	fp,12(sp)
   10c54:	df000304 	addi	fp,sp,12
   10c58:	e13ffd15 	stw	r4,-12(fp)
   10c5c:	e17ffe15 	stw	r5,-8(fp)
   10c60:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   10c64:	e0fffe17 	ldw	r3,-8(fp)
   10c68:	e0bffd17 	ldw	r2,-12(fp)
   10c6c:	18800c26 	beq	r3,r2,10ca0 <alt_load_section+0x54>
  {
    while( to != end )
   10c70:	00000806 	br	10c94 <alt_load_section+0x48>
    {
      *to++ = *from++;
   10c74:	e0bffe17 	ldw	r2,-8(fp)
   10c78:	10c00104 	addi	r3,r2,4
   10c7c:	e0fffe15 	stw	r3,-8(fp)
   10c80:	e0fffd17 	ldw	r3,-12(fp)
   10c84:	19000104 	addi	r4,r3,4
   10c88:	e13ffd15 	stw	r4,-12(fp)
   10c8c:	18c00017 	ldw	r3,0(r3)
   10c90:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   10c94:	e0fffe17 	ldw	r3,-8(fp)
   10c98:	e0bfff17 	ldw	r2,-4(fp)
   10c9c:	18bff51e 	bne	r3,r2,10c74 <__alt_data_end+0xffff0c74>
    {
      *to++ = *from++;
    }
  }
}
   10ca0:	e037883a 	mov	sp,fp
   10ca4:	df000017 	ldw	fp,0(sp)
   10ca8:	dec00104 	addi	sp,sp,4
   10cac:	f800283a 	ret

00010cb0 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   10cb0:	defffe04 	addi	sp,sp,-8
   10cb4:	dfc00115 	stw	ra,4(sp)
   10cb8:	df000015 	stw	fp,0(sp)
   10cbc:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   10cc0:	01000074 	movhi	r4,1
   10cc4:	21119c04 	addi	r4,r4,18032
   10cc8:	01400074 	movhi	r5,1
   10ccc:	294c0504 	addi	r5,r5,12308
   10cd0:	01800074 	movhi	r6,1
   10cd4:	31919c04 	addi	r6,r6,18032
   10cd8:	0010c4c0 	call	10c4c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   10cdc:	01000074 	movhi	r4,1
   10ce0:	21000804 	addi	r4,r4,32
   10ce4:	01400074 	movhi	r5,1
   10ce8:	29400804 	addi	r5,r5,32
   10cec:	01800074 	movhi	r6,1
   10cf0:	31808b04 	addi	r6,r6,556
   10cf4:	0010c4c0 	call	10c4c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   10cf8:	01000074 	movhi	r4,1
   10cfc:	210bf104 	addi	r4,r4,12228
   10d00:	01400074 	movhi	r5,1
   10d04:	294bf104 	addi	r5,r5,12228
   10d08:	01800074 	movhi	r6,1
   10d0c:	318c0504 	addi	r6,r6,12308
   10d10:	0010c4c0 	call	10c4c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   10d14:	0011c240 	call	11c24 <alt_dcache_flush_all>
  alt_icache_flush_all();
   10d18:	0011e180 	call	11e18 <alt_icache_flush_all>
}
   10d1c:	e037883a 	mov	sp,fp
   10d20:	dfc00117 	ldw	ra,4(sp)
   10d24:	df000017 	ldw	fp,0(sp)
   10d28:	dec00204 	addi	sp,sp,8
   10d2c:	f800283a 	ret

00010d30 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   10d30:	defffd04 	addi	sp,sp,-12
   10d34:	dfc00215 	stw	ra,8(sp)
   10d38:	df000115 	stw	fp,4(sp)
   10d3c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   10d40:	0009883a 	mov	r4,zero
   10d44:	0010de00 	call	10de0 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   10d48:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   10d4c:	0010e140 	call	10e14 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   10d50:	01000074 	movhi	r4,1
   10d54:	210bf704 	addi	r4,r4,12252
   10d58:	01400074 	movhi	r5,1
   10d5c:	294bf704 	addi	r5,r5,12252
   10d60:	01800074 	movhi	r6,1
   10d64:	318bf704 	addi	r6,r6,12252
   10d68:	00121e40 	call	121e4 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   10d6c:	0011d600 	call	11d60 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   10d70:	01000074 	movhi	r4,1
   10d74:	21076f04 	addi	r4,r4,7612
   10d78:	0012a500 	call	12a50 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   10d7c:	d125a317 	ldw	r4,-26996(gp)
   10d80:	d0e5a417 	ldw	r3,-26992(gp)
   10d84:	d0a5a517 	ldw	r2,-26988(gp)
   10d88:	180b883a 	mov	r5,r3
   10d8c:	100d883a 	mov	r6,r2
   10d90:	00108800 	call	10880 <main>
   10d94:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   10d98:	01000044 	movi	r4,1
   10d9c:	0011b4c0 	call	11b4c <close>
  exit (result);
   10da0:	e13fff17 	ldw	r4,-4(fp)
   10da4:	0012a640 	call	12a64 <exit>

00010da8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   10da8:	defffd04 	addi	sp,sp,-12
   10dac:	dfc00215 	stw	ra,8(sp)
   10db0:	df000115 	stw	fp,4(sp)
   10db4:	df000104 	addi	fp,sp,4
   10db8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   10dbc:	e13fff17 	ldw	r4,-4(fp)
   10dc0:	01400074 	movhi	r5,1
   10dc4:	29519304 	addi	r5,r5,17996
   10dc8:	0011cbc0 	call	11cbc <alt_dev_llist_insert>
}
   10dcc:	e037883a 	mov	sp,fp
   10dd0:	dfc00117 	ldw	ra,4(sp)
   10dd4:	df000017 	ldw	fp,0(sp)
   10dd8:	dec00204 	addi	sp,sp,8
   10ddc:	f800283a 	ret

00010de0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   10de0:	defffd04 	addi	sp,sp,-12
   10de4:	dfc00215 	stw	ra,8(sp)
   10de8:	df000115 	stw	fp,4(sp)
   10dec:	df000104 	addi	fp,sp,4
   10df0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
   10df4:	001271c0 	call	1271c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   10df8:	00800044 	movi	r2,1
   10dfc:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   10e00:	e037883a 	mov	sp,fp
   10e04:	dfc00117 	ldw	ra,4(sp)
   10e08:	df000017 	ldw	fp,0(sp)
   10e0c:	dec00204 	addi	sp,sp,8
   10e10:	f800283a 	ret

00010e14 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   10e14:	defffe04 	addi	sp,sp,-8
   10e18:	dfc00115 	stw	ra,4(sp)
   10e1c:	df000015 	stw	fp,0(sp)
   10e20:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
   10e24:	010000b4 	movhi	r4,2
   10e28:	21040004 	addi	r4,r4,4096
   10e2c:	000b883a 	mov	r5,zero
   10e30:	01800044 	movi	r6,1
   10e34:	01c0fa04 	movi	r7,1000
   10e38:	00119340 	call	11934 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   10e3c:	01000074 	movhi	r4,1
   10e40:	210c0f04 	addi	r4,r4,12348
   10e44:	000b883a 	mov	r5,zero
   10e48:	000d883a 	mov	r6,zero
   10e4c:	0010fd80 	call	10fd8 <altera_avalon_jtag_uart_init>
   10e50:	01000074 	movhi	r4,1
   10e54:	210c0504 	addi	r4,r4,12308
   10e58:	0010da80 	call	10da8 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
   10e5c:	0001883a 	nop
}
   10e60:	e037883a 	mov	sp,fp
   10e64:	dfc00117 	ldw	ra,4(sp)
   10e68:	df000017 	ldw	fp,0(sp)
   10e6c:	dec00204 	addi	sp,sp,8
   10e70:	f800283a 	ret

00010e74 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   10e74:	defffa04 	addi	sp,sp,-24
   10e78:	dfc00515 	stw	ra,20(sp)
   10e7c:	df000415 	stw	fp,16(sp)
   10e80:	df000404 	addi	fp,sp,16
   10e84:	e13ffd15 	stw	r4,-12(fp)
   10e88:	e17ffe15 	stw	r5,-8(fp)
   10e8c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   10e90:	e0bffd17 	ldw	r2,-12(fp)
   10e94:	10800017 	ldw	r2,0(r2)
   10e98:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   10e9c:	e0bffc17 	ldw	r2,-16(fp)
   10ea0:	10c00a04 	addi	r3,r2,40
   10ea4:	e0bffd17 	ldw	r2,-12(fp)
   10ea8:	10800217 	ldw	r2,8(r2)
   10eac:	1809883a 	mov	r4,r3
   10eb0:	e17ffe17 	ldw	r5,-8(fp)
   10eb4:	e1bfff17 	ldw	r6,-4(fp)
   10eb8:	100f883a 	mov	r7,r2
   10ebc:	001149c0 	call	1149c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   10ec0:	e037883a 	mov	sp,fp
   10ec4:	dfc00117 	ldw	ra,4(sp)
   10ec8:	df000017 	ldw	fp,0(sp)
   10ecc:	dec00204 	addi	sp,sp,8
   10ed0:	f800283a 	ret

00010ed4 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   10ed4:	defffa04 	addi	sp,sp,-24
   10ed8:	dfc00515 	stw	ra,20(sp)
   10edc:	df000415 	stw	fp,16(sp)
   10ee0:	df000404 	addi	fp,sp,16
   10ee4:	e13ffd15 	stw	r4,-12(fp)
   10ee8:	e17ffe15 	stw	r5,-8(fp)
   10eec:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   10ef0:	e0bffd17 	ldw	r2,-12(fp)
   10ef4:	10800017 	ldw	r2,0(r2)
   10ef8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   10efc:	e0bffc17 	ldw	r2,-16(fp)
   10f00:	10c00a04 	addi	r3,r2,40
   10f04:	e0bffd17 	ldw	r2,-12(fp)
   10f08:	10800217 	ldw	r2,8(r2)
   10f0c:	1809883a 	mov	r4,r3
   10f10:	e17ffe17 	ldw	r5,-8(fp)
   10f14:	e1bfff17 	ldw	r6,-4(fp)
   10f18:	100f883a 	mov	r7,r2
   10f1c:	00116a80 	call	116a8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   10f20:	e037883a 	mov	sp,fp
   10f24:	dfc00117 	ldw	ra,4(sp)
   10f28:	df000017 	ldw	fp,0(sp)
   10f2c:	dec00204 	addi	sp,sp,8
   10f30:	f800283a 	ret

00010f34 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   10f34:	defffc04 	addi	sp,sp,-16
   10f38:	dfc00315 	stw	ra,12(sp)
   10f3c:	df000215 	stw	fp,8(sp)
   10f40:	df000204 	addi	fp,sp,8
   10f44:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   10f48:	e0bfff17 	ldw	r2,-4(fp)
   10f4c:	10800017 	ldw	r2,0(r2)
   10f50:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   10f54:	e0bffe17 	ldw	r2,-8(fp)
   10f58:	10c00a04 	addi	r3,r2,40
   10f5c:	e0bfff17 	ldw	r2,-4(fp)
   10f60:	10800217 	ldw	r2,8(r2)
   10f64:	1809883a 	mov	r4,r3
   10f68:	100b883a 	mov	r5,r2
   10f6c:	00113480 	call	11348 <altera_avalon_jtag_uart_close>
}
   10f70:	e037883a 	mov	sp,fp
   10f74:	dfc00117 	ldw	ra,4(sp)
   10f78:	df000017 	ldw	fp,0(sp)
   10f7c:	dec00204 	addi	sp,sp,8
   10f80:	f800283a 	ret

00010f84 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   10f84:	defffa04 	addi	sp,sp,-24
   10f88:	dfc00515 	stw	ra,20(sp)
   10f8c:	df000415 	stw	fp,16(sp)
   10f90:	df000404 	addi	fp,sp,16
   10f94:	e13ffd15 	stw	r4,-12(fp)
   10f98:	e17ffe15 	stw	r5,-8(fp)
   10f9c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   10fa0:	e0bffd17 	ldw	r2,-12(fp)
   10fa4:	10800017 	ldw	r2,0(r2)
   10fa8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   10fac:	e0bffc17 	ldw	r2,-16(fp)
   10fb0:	10800a04 	addi	r2,r2,40
   10fb4:	1009883a 	mov	r4,r2
   10fb8:	e17ffe17 	ldw	r5,-8(fp)
   10fbc:	e1bfff17 	ldw	r6,-4(fp)
   10fc0:	00113b00 	call	113b0 <altera_avalon_jtag_uart_ioctl>
}
   10fc4:	e037883a 	mov	sp,fp
   10fc8:	dfc00117 	ldw	ra,4(sp)
   10fcc:	df000017 	ldw	fp,0(sp)
   10fd0:	dec00204 	addi	sp,sp,8
   10fd4:	f800283a 	ret

00010fd8 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   10fd8:	defffa04 	addi	sp,sp,-24
   10fdc:	dfc00515 	stw	ra,20(sp)
   10fe0:	df000415 	stw	fp,16(sp)
   10fe4:	df000404 	addi	fp,sp,16
   10fe8:	e13ffd15 	stw	r4,-12(fp)
   10fec:	e17ffe15 	stw	r5,-8(fp)
   10ff0:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   10ff4:	e0bffd17 	ldw	r2,-12(fp)
   10ff8:	00c00044 	movi	r3,1
   10ffc:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   11000:	e0bffd17 	ldw	r2,-12(fp)
   11004:	10800017 	ldw	r2,0(r2)
   11008:	10800104 	addi	r2,r2,4
   1100c:	1007883a 	mov	r3,r2
   11010:	e0bffd17 	ldw	r2,-12(fp)
   11014:	10800817 	ldw	r2,32(r2)
   11018:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   1101c:	e0fffe17 	ldw	r3,-8(fp)
   11020:	e0bfff17 	ldw	r2,-4(fp)
   11024:	d8000015 	stw	zero,0(sp)
   11028:	1809883a 	mov	r4,r3
   1102c:	100b883a 	mov	r5,r2
   11030:	01800074 	movhi	r6,1
   11034:	31842704 	addi	r6,r6,4252
   11038:	e1fffd17 	ldw	r7,-12(fp)
   1103c:	0011e340 	call	11e34 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   11040:	e0bffd17 	ldw	r2,-12(fp)
   11044:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   11048:	e0bffd17 	ldw	r2,-12(fp)
   1104c:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   11050:	00800074 	movhi	r2,1
   11054:	10973704 	addi	r2,r2,23772
   11058:	10800017 	ldw	r2,0(r2)
   1105c:	1809883a 	mov	r4,r3
   11060:	100b883a 	mov	r5,r2
   11064:	01800074 	movhi	r6,1
   11068:	3184a804 	addi	r6,r6,4768
   1106c:	e1fffd17 	ldw	r7,-12(fp)
   11070:	00119bc0 	call	119bc <alt_alarm_start>
   11074:	1000040e 	bge	r2,zero,11088 <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   11078:	e0fffd17 	ldw	r3,-12(fp)
   1107c:	00a00034 	movhi	r2,32768
   11080:	10bfffc4 	addi	r2,r2,-1
   11084:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   11088:	e037883a 	mov	sp,fp
   1108c:	dfc00117 	ldw	ra,4(sp)
   11090:	df000017 	ldw	fp,0(sp)
   11094:	dec00204 	addi	sp,sp,8
   11098:	f800283a 	ret

0001109c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   1109c:	defff804 	addi	sp,sp,-32
   110a0:	df000715 	stw	fp,28(sp)
   110a4:	df000704 	addi	fp,sp,28
   110a8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   110ac:	e0bfff17 	ldw	r2,-4(fp)
   110b0:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   110b4:	e0bffb17 	ldw	r2,-20(fp)
   110b8:	10800017 	ldw	r2,0(r2)
   110bc:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   110c0:	e0bffc17 	ldw	r2,-16(fp)
   110c4:	10800104 	addi	r2,r2,4
   110c8:	10800037 	ldwio	r2,0(r2)
   110cc:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   110d0:	e0bffd17 	ldw	r2,-12(fp)
   110d4:	1080c00c 	andi	r2,r2,768
   110d8:	1000011e 	bne	r2,zero,110e0 <altera_avalon_jtag_uart_irq+0x44>
      break;
   110dc:	00006c06 	br	11290 <altera_avalon_jtag_uart_irq+0x1f4>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   110e0:	e0bffd17 	ldw	r2,-12(fp)
   110e4:	1080400c 	andi	r2,r2,256
   110e8:	10003426 	beq	r2,zero,111bc <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   110ec:	00800074 	movhi	r2,1
   110f0:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   110f4:	e0bffb17 	ldw	r2,-20(fp)
   110f8:	10800a17 	ldw	r2,40(r2)
   110fc:	10800044 	addi	r2,r2,1
   11100:	1081ffcc 	andi	r2,r2,2047
   11104:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   11108:	e0bffb17 	ldw	r2,-20(fp)
   1110c:	10c00b17 	ldw	r3,44(r2)
   11110:	e0bffe17 	ldw	r2,-8(fp)
   11114:	1880011e 	bne	r3,r2,1111c <altera_avalon_jtag_uart_irq+0x80>
          break;
   11118:	00001606 	br	11174 <altera_avalon_jtag_uart_irq+0xd8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   1111c:	e0bffc17 	ldw	r2,-16(fp)
   11120:	10800037 	ldwio	r2,0(r2)
   11124:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   11128:	e0bff917 	ldw	r2,-28(fp)
   1112c:	10a0000c 	andi	r2,r2,32768
   11130:	1000011e 	bne	r2,zero,11138 <altera_avalon_jtag_uart_irq+0x9c>
          break;
   11134:	00000f06 	br	11174 <altera_avalon_jtag_uart_irq+0xd8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   11138:	e0bffb17 	ldw	r2,-20(fp)
   1113c:	10800a17 	ldw	r2,40(r2)
   11140:	e0fff917 	ldw	r3,-28(fp)
   11144:	1809883a 	mov	r4,r3
   11148:	e0fffb17 	ldw	r3,-20(fp)
   1114c:	1885883a 	add	r2,r3,r2
   11150:	10800e04 	addi	r2,r2,56
   11154:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   11158:	e0bffb17 	ldw	r2,-20(fp)
   1115c:	10800a17 	ldw	r2,40(r2)
   11160:	10800044 	addi	r2,r2,1
   11164:	10c1ffcc 	andi	r3,r2,2047
   11168:	e0bffb17 	ldw	r2,-20(fp)
   1116c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   11170:	003fe006 	br	110f4 <__alt_data_end+0xffff10f4>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   11174:	e0bff917 	ldw	r2,-28(fp)
   11178:	10bfffec 	andhi	r2,r2,65535
   1117c:	10000f26 	beq	r2,zero,111bc <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   11180:	e0bffb17 	ldw	r2,-20(fp)
   11184:	10c00817 	ldw	r3,32(r2)
   11188:	00bfff84 	movi	r2,-2
   1118c:	1886703a 	and	r3,r3,r2
   11190:	e0bffb17 	ldw	r2,-20(fp)
   11194:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   11198:	e0bffc17 	ldw	r2,-16(fp)
   1119c:	10800104 	addi	r2,r2,4
   111a0:	1007883a 	mov	r3,r2
   111a4:	e0bffb17 	ldw	r2,-20(fp)
   111a8:	10800817 	ldw	r2,32(r2)
   111ac:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   111b0:	e0bffc17 	ldw	r2,-16(fp)
   111b4:	10800104 	addi	r2,r2,4
   111b8:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   111bc:	e0bffd17 	ldw	r2,-12(fp)
   111c0:	1080800c 	andi	r2,r2,512
   111c4:	10003126 	beq	r2,zero,1128c <altera_avalon_jtag_uart_irq+0x1f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   111c8:	e0bffd17 	ldw	r2,-12(fp)
   111cc:	1004d43a 	srli	r2,r2,16
   111d0:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   111d4:	00001406 	br	11228 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   111d8:	e0bffc17 	ldw	r2,-16(fp)
   111dc:	e0fffb17 	ldw	r3,-20(fp)
   111e0:	18c00d17 	ldw	r3,52(r3)
   111e4:	e13ffb17 	ldw	r4,-20(fp)
   111e8:	20c7883a 	add	r3,r4,r3
   111ec:	18c20e04 	addi	r3,r3,2104
   111f0:	18c00003 	ldbu	r3,0(r3)
   111f4:	18c03fcc 	andi	r3,r3,255
   111f8:	18c0201c 	xori	r3,r3,128
   111fc:	18ffe004 	addi	r3,r3,-128
   11200:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   11204:	e0bffb17 	ldw	r2,-20(fp)
   11208:	10800d17 	ldw	r2,52(r2)
   1120c:	10800044 	addi	r2,r2,1
   11210:	10c1ffcc 	andi	r3,r2,2047
   11214:	e0bffb17 	ldw	r2,-20(fp)
   11218:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   1121c:	e0bffa17 	ldw	r2,-24(fp)
   11220:	10bfffc4 	addi	r2,r2,-1
   11224:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   11228:	e0bffa17 	ldw	r2,-24(fp)
   1122c:	10000526 	beq	r2,zero,11244 <altera_avalon_jtag_uart_irq+0x1a8>
   11230:	e0bffb17 	ldw	r2,-20(fp)
   11234:	10c00d17 	ldw	r3,52(r2)
   11238:	e0bffb17 	ldw	r2,-20(fp)
   1123c:	10800c17 	ldw	r2,48(r2)
   11240:	18bfe51e 	bne	r3,r2,111d8 <__alt_data_end+0xffff11d8>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   11244:	e0bffa17 	ldw	r2,-24(fp)
   11248:	10001026 	beq	r2,zero,1128c <altera_avalon_jtag_uart_irq+0x1f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   1124c:	e0bffb17 	ldw	r2,-20(fp)
   11250:	10c00817 	ldw	r3,32(r2)
   11254:	00bfff44 	movi	r2,-3
   11258:	1886703a 	and	r3,r3,r2
   1125c:	e0bffb17 	ldw	r2,-20(fp)
   11260:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   11264:	e0bffb17 	ldw	r2,-20(fp)
   11268:	10800017 	ldw	r2,0(r2)
   1126c:	10800104 	addi	r2,r2,4
   11270:	1007883a 	mov	r3,r2
   11274:	e0bffb17 	ldw	r2,-20(fp)
   11278:	10800817 	ldw	r2,32(r2)
   1127c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   11280:	e0bffc17 	ldw	r2,-16(fp)
   11284:	10800104 	addi	r2,r2,4
   11288:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   1128c:	003f8c06 	br	110c0 <__alt_data_end+0xffff10c0>
}
   11290:	e037883a 	mov	sp,fp
   11294:	df000017 	ldw	fp,0(sp)
   11298:	dec00104 	addi	sp,sp,4
   1129c:	f800283a 	ret

000112a0 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   112a0:	defff804 	addi	sp,sp,-32
   112a4:	df000715 	stw	fp,28(sp)
   112a8:	df000704 	addi	fp,sp,28
   112ac:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   112b0:	e0bffb17 	ldw	r2,-20(fp)
   112b4:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   112b8:	e0bff917 	ldw	r2,-28(fp)
   112bc:	10800017 	ldw	r2,0(r2)
   112c0:	10800104 	addi	r2,r2,4
   112c4:	10800037 	ldwio	r2,0(r2)
   112c8:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   112cc:	e0bffa17 	ldw	r2,-24(fp)
   112d0:	1081000c 	andi	r2,r2,1024
   112d4:	10000b26 	beq	r2,zero,11304 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   112d8:	e0bff917 	ldw	r2,-28(fp)
   112dc:	10800017 	ldw	r2,0(r2)
   112e0:	10800104 	addi	r2,r2,4
   112e4:	1007883a 	mov	r3,r2
   112e8:	e0bff917 	ldw	r2,-28(fp)
   112ec:	10800817 	ldw	r2,32(r2)
   112f0:	10810014 	ori	r2,r2,1024
   112f4:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   112f8:	e0bff917 	ldw	r2,-28(fp)
   112fc:	10000915 	stw	zero,36(r2)
   11300:	00000a06 	br	1132c <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   11304:	e0bff917 	ldw	r2,-28(fp)
   11308:	10c00917 	ldw	r3,36(r2)
   1130c:	00a00034 	movhi	r2,32768
   11310:	10bfff04 	addi	r2,r2,-4
   11314:	10c00536 	bltu	r2,r3,1132c <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   11318:	e0bff917 	ldw	r2,-28(fp)
   1131c:	10800917 	ldw	r2,36(r2)
   11320:	10c00044 	addi	r3,r2,1
   11324:	e0bff917 	ldw	r2,-28(fp)
   11328:	10c00915 	stw	r3,36(r2)
   1132c:	00800074 	movhi	r2,1
   11330:	10973704 	addi	r2,r2,23772
   11334:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   11338:	e037883a 	mov	sp,fp
   1133c:	df000017 	ldw	fp,0(sp)
   11340:	dec00104 	addi	sp,sp,4
   11344:	f800283a 	ret

00011348 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   11348:	defffd04 	addi	sp,sp,-12
   1134c:	df000215 	stw	fp,8(sp)
   11350:	df000204 	addi	fp,sp,8
   11354:	e13ffe15 	stw	r4,-8(fp)
   11358:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   1135c:	00000506 	br	11374 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   11360:	e0bfff17 	ldw	r2,-4(fp)
   11364:	1090000c 	andi	r2,r2,16384
   11368:	10000226 	beq	r2,zero,11374 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   1136c:	00bffd44 	movi	r2,-11
   11370:	00000b06 	br	113a0 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   11374:	e0bffe17 	ldw	r2,-8(fp)
   11378:	10c00d17 	ldw	r3,52(r2)
   1137c:	e0bffe17 	ldw	r2,-8(fp)
   11380:	10800c17 	ldw	r2,48(r2)
   11384:	18800526 	beq	r3,r2,1139c <altera_avalon_jtag_uart_close+0x54>
   11388:	e0bffe17 	ldw	r2,-8(fp)
   1138c:	10c00917 	ldw	r3,36(r2)
   11390:	e0bffe17 	ldw	r2,-8(fp)
   11394:	10800117 	ldw	r2,4(r2)
   11398:	18bff136 	bltu	r3,r2,11360 <__alt_data_end+0xffff1360>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   1139c:	0005883a 	mov	r2,zero
}
   113a0:	e037883a 	mov	sp,fp
   113a4:	df000017 	ldw	fp,0(sp)
   113a8:	dec00104 	addi	sp,sp,4
   113ac:	f800283a 	ret

000113b0 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   113b0:	defffa04 	addi	sp,sp,-24
   113b4:	df000515 	stw	fp,20(sp)
   113b8:	df000504 	addi	fp,sp,20
   113bc:	e13ffd15 	stw	r4,-12(fp)
   113c0:	e17ffe15 	stw	r5,-8(fp)
   113c4:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   113c8:	00bff9c4 	movi	r2,-25
   113cc:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   113d0:	e0bffe17 	ldw	r2,-8(fp)
   113d4:	10da8060 	cmpeqi	r3,r2,27137
   113d8:	1800031e 	bne	r3,zero,113e8 <altera_avalon_jtag_uart_ioctl+0x38>
   113dc:	109a80a0 	cmpeqi	r2,r2,27138
   113e0:	1000191e 	bne	r2,zero,11448 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
   113e4:	00002806 	br	11488 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   113e8:	e0bffd17 	ldw	r2,-12(fp)
   113ec:	10c00117 	ldw	r3,4(r2)
   113f0:	00a00034 	movhi	r2,32768
   113f4:	10bfffc4 	addi	r2,r2,-1
   113f8:	18801226 	beq	r3,r2,11444 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
   113fc:	e0bfff17 	ldw	r2,-4(fp)
   11400:	10800017 	ldw	r2,0(r2)
   11404:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   11408:	e0bffc17 	ldw	r2,-16(fp)
   1140c:	10800090 	cmplti	r2,r2,2
   11410:	1000061e 	bne	r2,zero,1142c <altera_avalon_jtag_uart_ioctl+0x7c>
   11414:	e0fffc17 	ldw	r3,-16(fp)
   11418:	00a00034 	movhi	r2,32768
   1141c:	10bfffc4 	addi	r2,r2,-1
   11420:	18800226 	beq	r3,r2,1142c <altera_avalon_jtag_uart_ioctl+0x7c>
   11424:	e0bffc17 	ldw	r2,-16(fp)
   11428:	00000206 	br	11434 <altera_avalon_jtag_uart_ioctl+0x84>
   1142c:	00a00034 	movhi	r2,32768
   11430:	10bfff84 	addi	r2,r2,-2
   11434:	e0fffd17 	ldw	r3,-12(fp)
   11438:	18800115 	stw	r2,4(r3)
      rc = 0;
   1143c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   11440:	00001106 	br	11488 <altera_avalon_jtag_uart_ioctl+0xd8>
   11444:	00001006 	br	11488 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   11448:	e0bffd17 	ldw	r2,-12(fp)
   1144c:	10c00117 	ldw	r3,4(r2)
   11450:	00a00034 	movhi	r2,32768
   11454:	10bfffc4 	addi	r2,r2,-1
   11458:	18800a26 	beq	r3,r2,11484 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   1145c:	e0bffd17 	ldw	r2,-12(fp)
   11460:	10c00917 	ldw	r3,36(r2)
   11464:	e0bffd17 	ldw	r2,-12(fp)
   11468:	10800117 	ldw	r2,4(r2)
   1146c:	1885803a 	cmpltu	r2,r3,r2
   11470:	10c03fcc 	andi	r3,r2,255
   11474:	e0bfff17 	ldw	r2,-4(fp)
   11478:	10c00015 	stw	r3,0(r2)
      rc = 0;
   1147c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   11480:	00000006 	br	11484 <altera_avalon_jtag_uart_ioctl+0xd4>
   11484:	0001883a 	nop

  default:
    break;
  }

  return rc;
   11488:	e0bffb17 	ldw	r2,-20(fp)
}
   1148c:	e037883a 	mov	sp,fp
   11490:	df000017 	ldw	fp,0(sp)
   11494:	dec00104 	addi	sp,sp,4
   11498:	f800283a 	ret

0001149c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   1149c:	defff304 	addi	sp,sp,-52
   114a0:	dfc00c15 	stw	ra,48(sp)
   114a4:	df000b15 	stw	fp,44(sp)
   114a8:	df000b04 	addi	fp,sp,44
   114ac:	e13ffc15 	stw	r4,-16(fp)
   114b0:	e17ffd15 	stw	r5,-12(fp)
   114b4:	e1bffe15 	stw	r6,-8(fp)
   114b8:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   114bc:	e0bffd17 	ldw	r2,-12(fp)
   114c0:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   114c4:	00004906 	br	115ec <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   114c8:	e0bffc17 	ldw	r2,-16(fp)
   114cc:	10800a17 	ldw	r2,40(r2)
   114d0:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   114d4:	e0bffc17 	ldw	r2,-16(fp)
   114d8:	10800b17 	ldw	r2,44(r2)
   114dc:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   114e0:	e0fff717 	ldw	r3,-36(fp)
   114e4:	e0bff817 	ldw	r2,-32(fp)
   114e8:	18800536 	bltu	r3,r2,11500 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   114ec:	e0fff717 	ldw	r3,-36(fp)
   114f0:	e0bff817 	ldw	r2,-32(fp)
   114f4:	1885c83a 	sub	r2,r3,r2
   114f8:	e0bff615 	stw	r2,-40(fp)
   114fc:	00000406 	br	11510 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   11500:	00c20004 	movi	r3,2048
   11504:	e0bff817 	ldw	r2,-32(fp)
   11508:	1885c83a 	sub	r2,r3,r2
   1150c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   11510:	e0bff617 	ldw	r2,-40(fp)
   11514:	1000011e 	bne	r2,zero,1151c <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
   11518:	00001d06 	br	11590 <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
   1151c:	e0fffe17 	ldw	r3,-8(fp)
   11520:	e0bff617 	ldw	r2,-40(fp)
   11524:	1880022e 	bgeu	r3,r2,11530 <altera_avalon_jtag_uart_read+0x94>
        n = space;
   11528:	e0bffe17 	ldw	r2,-8(fp)
   1152c:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   11530:	e0bff817 	ldw	r2,-32(fp)
   11534:	10800e04 	addi	r2,r2,56
   11538:	e0fffc17 	ldw	r3,-16(fp)
   1153c:	1885883a 	add	r2,r3,r2
   11540:	e13ff517 	ldw	r4,-44(fp)
   11544:	100b883a 	mov	r5,r2
   11548:	e1bff617 	ldw	r6,-40(fp)
   1154c:	0012b180 	call	12b18 <memcpy>
      ptr   += n;
   11550:	e0fff517 	ldw	r3,-44(fp)
   11554:	e0bff617 	ldw	r2,-40(fp)
   11558:	1885883a 	add	r2,r3,r2
   1155c:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   11560:	e0fffe17 	ldw	r3,-8(fp)
   11564:	e0bff617 	ldw	r2,-40(fp)
   11568:	1885c83a 	sub	r2,r3,r2
   1156c:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   11570:	e0fff817 	ldw	r3,-32(fp)
   11574:	e0bff617 	ldw	r2,-40(fp)
   11578:	1885883a 	add	r2,r3,r2
   1157c:	10c1ffcc 	andi	r3,r2,2047
   11580:	e0bffc17 	ldw	r2,-16(fp)
   11584:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   11588:	e0bffe17 	ldw	r2,-8(fp)
   1158c:	00bfce16 	blt	zero,r2,114c8 <__alt_data_end+0xffff14c8>

    /* If we read any data then return it */
    if (ptr != buffer)
   11590:	e0fff517 	ldw	r3,-44(fp)
   11594:	e0bffd17 	ldw	r2,-12(fp)
   11598:	18800126 	beq	r3,r2,115a0 <altera_avalon_jtag_uart_read+0x104>
      break;
   1159c:	00001506 	br	115f4 <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   115a0:	e0bfff17 	ldw	r2,-4(fp)
   115a4:	1090000c 	andi	r2,r2,16384
   115a8:	10000126 	beq	r2,zero,115b0 <altera_avalon_jtag_uart_read+0x114>
      break;
   115ac:	00001106 	br	115f4 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   115b0:	0001883a 	nop
   115b4:	e0bffc17 	ldw	r2,-16(fp)
   115b8:	10c00a17 	ldw	r3,40(r2)
   115bc:	e0bff717 	ldw	r2,-36(fp)
   115c0:	1880051e 	bne	r3,r2,115d8 <altera_avalon_jtag_uart_read+0x13c>
   115c4:	e0bffc17 	ldw	r2,-16(fp)
   115c8:	10c00917 	ldw	r3,36(r2)
   115cc:	e0bffc17 	ldw	r2,-16(fp)
   115d0:	10800117 	ldw	r2,4(r2)
   115d4:	18bff736 	bltu	r3,r2,115b4 <__alt_data_end+0xffff15b4>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   115d8:	e0bffc17 	ldw	r2,-16(fp)
   115dc:	10c00a17 	ldw	r3,40(r2)
   115e0:	e0bff717 	ldw	r2,-36(fp)
   115e4:	1880011e 	bne	r3,r2,115ec <altera_avalon_jtag_uart_read+0x150>
      break;
   115e8:	00000206 	br	115f4 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   115ec:	e0bffe17 	ldw	r2,-8(fp)
   115f0:	00bfb516 	blt	zero,r2,114c8 <__alt_data_end+0xffff14c8>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   115f4:	e0fff517 	ldw	r3,-44(fp)
   115f8:	e0bffd17 	ldw	r2,-12(fp)
   115fc:	18801826 	beq	r3,r2,11660 <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11600:	0005303a 	rdctl	r2,status
   11604:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11608:	e0fffa17 	ldw	r3,-24(fp)
   1160c:	00bfff84 	movi	r2,-2
   11610:	1884703a 	and	r2,r3,r2
   11614:	1001703a 	wrctl	status,r2
  
  return context;
   11618:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   1161c:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   11620:	e0bffc17 	ldw	r2,-16(fp)
   11624:	10800817 	ldw	r2,32(r2)
   11628:	10c00054 	ori	r3,r2,1
   1162c:	e0bffc17 	ldw	r2,-16(fp)
   11630:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   11634:	e0bffc17 	ldw	r2,-16(fp)
   11638:	10800017 	ldw	r2,0(r2)
   1163c:	10800104 	addi	r2,r2,4
   11640:	1007883a 	mov	r3,r2
   11644:	e0bffc17 	ldw	r2,-16(fp)
   11648:	10800817 	ldw	r2,32(r2)
   1164c:	18800035 	stwio	r2,0(r3)
   11650:	e0bff917 	ldw	r2,-28(fp)
   11654:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11658:	e0bffb17 	ldw	r2,-20(fp)
   1165c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   11660:	e0fff517 	ldw	r3,-44(fp)
   11664:	e0bffd17 	ldw	r2,-12(fp)
   11668:	18800426 	beq	r3,r2,1167c <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
   1166c:	e0fff517 	ldw	r3,-44(fp)
   11670:	e0bffd17 	ldw	r2,-12(fp)
   11674:	1885c83a 	sub	r2,r3,r2
   11678:	00000606 	br	11694 <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
   1167c:	e0bfff17 	ldw	r2,-4(fp)
   11680:	1090000c 	andi	r2,r2,16384
   11684:	10000226 	beq	r2,zero,11690 <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
   11688:	00bffd44 	movi	r2,-11
   1168c:	00000106 	br	11694 <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
   11690:	00bffec4 	movi	r2,-5
}
   11694:	e037883a 	mov	sp,fp
   11698:	dfc00117 	ldw	ra,4(sp)
   1169c:	df000017 	ldw	fp,0(sp)
   116a0:	dec00204 	addi	sp,sp,8
   116a4:	f800283a 	ret

000116a8 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   116a8:	defff304 	addi	sp,sp,-52
   116ac:	dfc00c15 	stw	ra,48(sp)
   116b0:	df000b15 	stw	fp,44(sp)
   116b4:	df000b04 	addi	fp,sp,44
   116b8:	e13ffc15 	stw	r4,-16(fp)
   116bc:	e17ffd15 	stw	r5,-12(fp)
   116c0:	e1bffe15 	stw	r6,-8(fp)
   116c4:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   116c8:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   116cc:	e0bffd17 	ldw	r2,-12(fp)
   116d0:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   116d4:	00003806 	br	117b8 <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   116d8:	e0bffc17 	ldw	r2,-16(fp)
   116dc:	10800c17 	ldw	r2,48(r2)
   116e0:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
   116e4:	e0bffc17 	ldw	r2,-16(fp)
   116e8:	10800d17 	ldw	r2,52(r2)
   116ec:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   116f0:	e0fff817 	ldw	r3,-32(fp)
   116f4:	e0bff517 	ldw	r2,-44(fp)
   116f8:	1880062e 	bgeu	r3,r2,11714 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   116fc:	e0fff517 	ldw	r3,-44(fp)
   11700:	e0bff817 	ldw	r2,-32(fp)
   11704:	1885c83a 	sub	r2,r3,r2
   11708:	10bfffc4 	addi	r2,r2,-1
   1170c:	e0bff615 	stw	r2,-40(fp)
   11710:	00000b06 	br	11740 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   11714:	e0bff517 	ldw	r2,-44(fp)
   11718:	10000526 	beq	r2,zero,11730 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   1171c:	00c20004 	movi	r3,2048
   11720:	e0bff817 	ldw	r2,-32(fp)
   11724:	1885c83a 	sub	r2,r3,r2
   11728:	e0bff615 	stw	r2,-40(fp)
   1172c:	00000406 	br	11740 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   11730:	00c1ffc4 	movi	r3,2047
   11734:	e0bff817 	ldw	r2,-32(fp)
   11738:	1885c83a 	sub	r2,r3,r2
   1173c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   11740:	e0bff617 	ldw	r2,-40(fp)
   11744:	1000011e 	bne	r2,zero,1174c <altera_avalon_jtag_uart_write+0xa4>
        break;
   11748:	00001d06 	br	117c0 <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
   1174c:	e0fffe17 	ldw	r3,-8(fp)
   11750:	e0bff617 	ldw	r2,-40(fp)
   11754:	1880022e 	bgeu	r3,r2,11760 <altera_avalon_jtag_uart_write+0xb8>
        n = count;
   11758:	e0bffe17 	ldw	r2,-8(fp)
   1175c:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   11760:	e0bff817 	ldw	r2,-32(fp)
   11764:	10820e04 	addi	r2,r2,2104
   11768:	e0fffc17 	ldw	r3,-16(fp)
   1176c:	1885883a 	add	r2,r3,r2
   11770:	1009883a 	mov	r4,r2
   11774:	e17ffd17 	ldw	r5,-12(fp)
   11778:	e1bff617 	ldw	r6,-40(fp)
   1177c:	0012b180 	call	12b18 <memcpy>
      ptr   += n;
   11780:	e0fffd17 	ldw	r3,-12(fp)
   11784:	e0bff617 	ldw	r2,-40(fp)
   11788:	1885883a 	add	r2,r3,r2
   1178c:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   11790:	e0fffe17 	ldw	r3,-8(fp)
   11794:	e0bff617 	ldw	r2,-40(fp)
   11798:	1885c83a 	sub	r2,r3,r2
   1179c:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   117a0:	e0fff817 	ldw	r3,-32(fp)
   117a4:	e0bff617 	ldw	r2,-40(fp)
   117a8:	1885883a 	add	r2,r3,r2
   117ac:	10c1ffcc 	andi	r3,r2,2047
   117b0:	e0bffc17 	ldw	r2,-16(fp)
   117b4:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   117b8:	e0bffe17 	ldw	r2,-8(fp)
   117bc:	00bfc616 	blt	zero,r2,116d8 <__alt_data_end+0xffff16d8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   117c0:	0005303a 	rdctl	r2,status
   117c4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   117c8:	e0fffa17 	ldw	r3,-24(fp)
   117cc:	00bfff84 	movi	r2,-2
   117d0:	1884703a 	and	r2,r3,r2
   117d4:	1001703a 	wrctl	status,r2
  
  return context;
   117d8:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   117dc:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   117e0:	e0bffc17 	ldw	r2,-16(fp)
   117e4:	10800817 	ldw	r2,32(r2)
   117e8:	10c00094 	ori	r3,r2,2
   117ec:	e0bffc17 	ldw	r2,-16(fp)
   117f0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   117f4:	e0bffc17 	ldw	r2,-16(fp)
   117f8:	10800017 	ldw	r2,0(r2)
   117fc:	10800104 	addi	r2,r2,4
   11800:	1007883a 	mov	r3,r2
   11804:	e0bffc17 	ldw	r2,-16(fp)
   11808:	10800817 	ldw	r2,32(r2)
   1180c:	18800035 	stwio	r2,0(r3)
   11810:	e0bff917 	ldw	r2,-28(fp)
   11814:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11818:	e0bffb17 	ldw	r2,-20(fp)
   1181c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   11820:	e0bffe17 	ldw	r2,-8(fp)
   11824:	0080120e 	bge	zero,r2,11870 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
   11828:	e0bfff17 	ldw	r2,-4(fp)
   1182c:	1090000c 	andi	r2,r2,16384
   11830:	10000126 	beq	r2,zero,11838 <altera_avalon_jtag_uart_write+0x190>
        break;
   11834:	00001006 	br	11878 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   11838:	0001883a 	nop
   1183c:	e0bffc17 	ldw	r2,-16(fp)
   11840:	10c00d17 	ldw	r3,52(r2)
   11844:	e0bff517 	ldw	r2,-44(fp)
   11848:	1880051e 	bne	r3,r2,11860 <altera_avalon_jtag_uart_write+0x1b8>
   1184c:	e0bffc17 	ldw	r2,-16(fp)
   11850:	10c00917 	ldw	r3,36(r2)
   11854:	e0bffc17 	ldw	r2,-16(fp)
   11858:	10800117 	ldw	r2,4(r2)
   1185c:	18bff736 	bltu	r3,r2,1183c <__alt_data_end+0xffff183c>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   11860:	e0bffc17 	ldw	r2,-16(fp)
   11864:	10800917 	ldw	r2,36(r2)
   11868:	10000126 	beq	r2,zero,11870 <altera_avalon_jtag_uart_write+0x1c8>
         break;
   1186c:	00000206 	br	11878 <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
   11870:	e0bffe17 	ldw	r2,-8(fp)
   11874:	00bf9716 	blt	zero,r2,116d4 <__alt_data_end+0xffff16d4>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   11878:	e0fffd17 	ldw	r3,-12(fp)
   1187c:	e0bff717 	ldw	r2,-36(fp)
   11880:	18800426 	beq	r3,r2,11894 <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
   11884:	e0fffd17 	ldw	r3,-12(fp)
   11888:	e0bff717 	ldw	r2,-36(fp)
   1188c:	1885c83a 	sub	r2,r3,r2
   11890:	00000606 	br	118ac <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
   11894:	e0bfff17 	ldw	r2,-4(fp)
   11898:	1090000c 	andi	r2,r2,16384
   1189c:	10000226 	beq	r2,zero,118a8 <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
   118a0:	00bffd44 	movi	r2,-11
   118a4:	00000106 	br	118ac <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   118a8:	00bffec4 	movi	r2,-5
}
   118ac:	e037883a 	mov	sp,fp
   118b0:	dfc00117 	ldw	ra,4(sp)
   118b4:	df000017 	ldw	fp,0(sp)
   118b8:	dec00204 	addi	sp,sp,8
   118bc:	f800283a 	ret

000118c0 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   118c0:	defffa04 	addi	sp,sp,-24
   118c4:	dfc00515 	stw	ra,20(sp)
   118c8:	df000415 	stw	fp,16(sp)
   118cc:	df000404 	addi	fp,sp,16
   118d0:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   118d4:	0007883a 	mov	r3,zero
   118d8:	e0bfff17 	ldw	r2,-4(fp)
   118dc:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   118e0:	e0bfff17 	ldw	r2,-4(fp)
   118e4:	10800104 	addi	r2,r2,4
   118e8:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   118ec:	0005303a 	rdctl	r2,status
   118f0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   118f4:	e0fffd17 	ldw	r3,-12(fp)
   118f8:	00bfff84 	movi	r2,-2
   118fc:	1884703a 	and	r2,r3,r2
   11900:	1001703a 	wrctl	status,r2
  
  return context;
   11904:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   11908:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   1190c:	00126180 	call	12618 <alt_tick>
   11910:	e0bffc17 	ldw	r2,-16(fp)
   11914:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11918:	e0bffe17 	ldw	r2,-8(fp)
   1191c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   11920:	e037883a 	mov	sp,fp
   11924:	dfc00117 	ldw	ra,4(sp)
   11928:	df000017 	ldw	fp,0(sp)
   1192c:	dec00204 	addi	sp,sp,8
   11930:	f800283a 	ret

00011934 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   11934:	defff804 	addi	sp,sp,-32
   11938:	dfc00715 	stw	ra,28(sp)
   1193c:	df000615 	stw	fp,24(sp)
   11940:	df000604 	addi	fp,sp,24
   11944:	e13ffc15 	stw	r4,-16(fp)
   11948:	e17ffd15 	stw	r5,-12(fp)
   1194c:	e1bffe15 	stw	r6,-8(fp)
   11950:	e1ffff15 	stw	r7,-4(fp)
   11954:	e0bfff17 	ldw	r2,-4(fp)
   11958:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   1195c:	00800074 	movhi	r2,1
   11960:	10973704 	addi	r2,r2,23772
   11964:	10800017 	ldw	r2,0(r2)
   11968:	1000041e 	bne	r2,zero,1197c <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
   1196c:	00800074 	movhi	r2,1
   11970:	10973704 	addi	r2,r2,23772
   11974:	e0fffb17 	ldw	r3,-20(fp)
   11978:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   1197c:	e0bffc17 	ldw	r2,-16(fp)
   11980:	10800104 	addi	r2,r2,4
   11984:	00c001c4 	movi	r3,7
   11988:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   1198c:	d8000015 	stw	zero,0(sp)
   11990:	e13ffd17 	ldw	r4,-12(fp)
   11994:	e17ffe17 	ldw	r5,-8(fp)
   11998:	01800074 	movhi	r6,1
   1199c:	31863004 	addi	r6,r6,6336
   119a0:	e1fffc17 	ldw	r7,-16(fp)
   119a4:	0011e340 	call	11e34 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   119a8:	e037883a 	mov	sp,fp
   119ac:	dfc00117 	ldw	ra,4(sp)
   119b0:	df000017 	ldw	fp,0(sp)
   119b4:	dec00204 	addi	sp,sp,8
   119b8:	f800283a 	ret

000119bc <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   119bc:	defff504 	addi	sp,sp,-44
   119c0:	df000a15 	stw	fp,40(sp)
   119c4:	df000a04 	addi	fp,sp,40
   119c8:	e13ffc15 	stw	r4,-16(fp)
   119cc:	e17ffd15 	stw	r5,-12(fp)
   119d0:	e1bffe15 	stw	r6,-8(fp)
   119d4:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   119d8:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   119dc:	00800074 	movhi	r2,1
   119e0:	10973704 	addi	r2,r2,23772
   119e4:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   119e8:	10003f26 	beq	r2,zero,11ae8 <alt_alarm_start+0x12c>
  {
    if (alarm)
   119ec:	e0bffc17 	ldw	r2,-16(fp)
   119f0:	10003b26 	beq	r2,zero,11ae0 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
   119f4:	e0bffc17 	ldw	r2,-16(fp)
   119f8:	e0fffe17 	ldw	r3,-8(fp)
   119fc:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   11a00:	e0bffc17 	ldw	r2,-16(fp)
   11a04:	e0ffff17 	ldw	r3,-4(fp)
   11a08:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11a0c:	0005303a 	rdctl	r2,status
   11a10:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11a14:	e0fff817 	ldw	r3,-32(fp)
   11a18:	00bfff84 	movi	r2,-2
   11a1c:	1884703a 	and	r2,r3,r2
   11a20:	1001703a 	wrctl	status,r2
  
  return context;
   11a24:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   11a28:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   11a2c:	00800074 	movhi	r2,1
   11a30:	10973804 	addi	r2,r2,23776
   11a34:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   11a38:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   11a3c:	e0fffd17 	ldw	r3,-12(fp)
   11a40:	e0bff617 	ldw	r2,-40(fp)
   11a44:	1885883a 	add	r2,r3,r2
   11a48:	10c00044 	addi	r3,r2,1
   11a4c:	e0bffc17 	ldw	r2,-16(fp)
   11a50:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   11a54:	e0bffc17 	ldw	r2,-16(fp)
   11a58:	10c00217 	ldw	r3,8(r2)
   11a5c:	e0bff617 	ldw	r2,-40(fp)
   11a60:	1880042e 	bgeu	r3,r2,11a74 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
   11a64:	e0bffc17 	ldw	r2,-16(fp)
   11a68:	00c00044 	movi	r3,1
   11a6c:	10c00405 	stb	r3,16(r2)
   11a70:	00000206 	br	11a7c <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
   11a74:	e0bffc17 	ldw	r2,-16(fp)
   11a78:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   11a7c:	e0fffc17 	ldw	r3,-16(fp)
   11a80:	00800074 	movhi	r2,1
   11a84:	10919804 	addi	r2,r2,18016
   11a88:	e0bff915 	stw	r2,-28(fp)
   11a8c:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   11a90:	e0bffa17 	ldw	r2,-24(fp)
   11a94:	e0fff917 	ldw	r3,-28(fp)
   11a98:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   11a9c:	e0bff917 	ldw	r2,-28(fp)
   11aa0:	10c00017 	ldw	r3,0(r2)
   11aa4:	e0bffa17 	ldw	r2,-24(fp)
   11aa8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   11aac:	e0bff917 	ldw	r2,-28(fp)
   11ab0:	10800017 	ldw	r2,0(r2)
   11ab4:	e0fffa17 	ldw	r3,-24(fp)
   11ab8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   11abc:	e0bff917 	ldw	r2,-28(fp)
   11ac0:	e0fffa17 	ldw	r3,-24(fp)
   11ac4:	10c00015 	stw	r3,0(r2)
   11ac8:	e0bff717 	ldw	r2,-36(fp)
   11acc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11ad0:	e0bffb17 	ldw	r2,-20(fp)
   11ad4:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   11ad8:	0005883a 	mov	r2,zero
   11adc:	00000306 	br	11aec <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
   11ae0:	00bffa84 	movi	r2,-22
   11ae4:	00000106 	br	11aec <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
   11ae8:	00bfde84 	movi	r2,-134
  }
}
   11aec:	e037883a 	mov	sp,fp
   11af0:	df000017 	ldw	fp,0(sp)
   11af4:	dec00104 	addi	sp,sp,4
   11af8:	f800283a 	ret

00011afc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   11afc:	defffe04 	addi	sp,sp,-8
   11b00:	dfc00115 	stw	ra,4(sp)
   11b04:	df000015 	stw	fp,0(sp)
   11b08:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   11b0c:	00800074 	movhi	r2,1
   11b10:	10919604 	addi	r2,r2,18008
   11b14:	10800017 	ldw	r2,0(r2)
   11b18:	10000526 	beq	r2,zero,11b30 <alt_get_errno+0x34>
   11b1c:	00800074 	movhi	r2,1
   11b20:	10919604 	addi	r2,r2,18008
   11b24:	10800017 	ldw	r2,0(r2)
   11b28:	103ee83a 	callr	r2
   11b2c:	00000206 	br	11b38 <alt_get_errno+0x3c>
   11b30:	00800074 	movhi	r2,1
   11b34:	10973a04 	addi	r2,r2,23784
}
   11b38:	e037883a 	mov	sp,fp
   11b3c:	dfc00117 	ldw	ra,4(sp)
   11b40:	df000017 	ldw	fp,0(sp)
   11b44:	dec00204 	addi	sp,sp,8
   11b48:	f800283a 	ret

00011b4c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   11b4c:	defffb04 	addi	sp,sp,-20
   11b50:	dfc00415 	stw	ra,16(sp)
   11b54:	df000315 	stw	fp,12(sp)
   11b58:	df000304 	addi	fp,sp,12
   11b5c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   11b60:	e0bfff17 	ldw	r2,-4(fp)
   11b64:	10000816 	blt	r2,zero,11b88 <close+0x3c>
   11b68:	e13fff17 	ldw	r4,-4(fp)
   11b6c:	01400304 	movi	r5,12
   11b70:	0010c240 	call	10c24 <__mulsi3>
   11b74:	1007883a 	mov	r3,r2
   11b78:	00800074 	movhi	r2,1
   11b7c:	10902704 	addi	r2,r2,16540
   11b80:	1885883a 	add	r2,r3,r2
   11b84:	00000106 	br	11b8c <close+0x40>
   11b88:	0005883a 	mov	r2,zero
   11b8c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   11b90:	e0bffd17 	ldw	r2,-12(fp)
   11b94:	10001926 	beq	r2,zero,11bfc <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   11b98:	e0bffd17 	ldw	r2,-12(fp)
   11b9c:	10800017 	ldw	r2,0(r2)
   11ba0:	10800417 	ldw	r2,16(r2)
   11ba4:	10000626 	beq	r2,zero,11bc0 <close+0x74>
   11ba8:	e0bffd17 	ldw	r2,-12(fp)
   11bac:	10800017 	ldw	r2,0(r2)
   11bb0:	10800417 	ldw	r2,16(r2)
   11bb4:	e13ffd17 	ldw	r4,-12(fp)
   11bb8:	103ee83a 	callr	r2
   11bbc:	00000106 	br	11bc4 <close+0x78>
   11bc0:	0005883a 	mov	r2,zero
   11bc4:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   11bc8:	e13fff17 	ldw	r4,-4(fp)
   11bcc:	00125000 	call	12500 <alt_release_fd>
    if (rval < 0)
   11bd0:	e0bffe17 	ldw	r2,-8(fp)
   11bd4:	1000070e 	bge	r2,zero,11bf4 <close+0xa8>
    {
      ALT_ERRNO = -rval;
   11bd8:	0011afc0 	call	11afc <alt_get_errno>
   11bdc:	1007883a 	mov	r3,r2
   11be0:	e0bffe17 	ldw	r2,-8(fp)
   11be4:	0085c83a 	sub	r2,zero,r2
   11be8:	18800015 	stw	r2,0(r3)
      return -1;
   11bec:	00bfffc4 	movi	r2,-1
   11bf0:	00000706 	br	11c10 <close+0xc4>
    }
    return 0;
   11bf4:	0005883a 	mov	r2,zero
   11bf8:	00000506 	br	11c10 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   11bfc:	0011afc0 	call	11afc <alt_get_errno>
   11c00:	1007883a 	mov	r3,r2
   11c04:	00801444 	movi	r2,81
   11c08:	18800015 	stw	r2,0(r3)
    return -1;
   11c0c:	00bfffc4 	movi	r2,-1
  }
}
   11c10:	e037883a 	mov	sp,fp
   11c14:	dfc00117 	ldw	ra,4(sp)
   11c18:	df000017 	ldw	fp,0(sp)
   11c1c:	dec00204 	addi	sp,sp,8
   11c20:	f800283a 	ret

00011c24 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   11c24:	deffff04 	addi	sp,sp,-4
   11c28:	df000015 	stw	fp,0(sp)
   11c2c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   11c30:	e037883a 	mov	sp,fp
   11c34:	df000017 	ldw	fp,0(sp)
   11c38:	dec00104 	addi	sp,sp,4
   11c3c:	f800283a 	ret

00011c40 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   11c40:	defffc04 	addi	sp,sp,-16
   11c44:	df000315 	stw	fp,12(sp)
   11c48:	df000304 	addi	fp,sp,12
   11c4c:	e13ffd15 	stw	r4,-12(fp)
   11c50:	e17ffe15 	stw	r5,-8(fp)
   11c54:	e1bfff15 	stw	r6,-4(fp)
  return len;
   11c58:	e0bfff17 	ldw	r2,-4(fp)
}
   11c5c:	e037883a 	mov	sp,fp
   11c60:	df000017 	ldw	fp,0(sp)
   11c64:	dec00104 	addi	sp,sp,4
   11c68:	f800283a 	ret

00011c6c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   11c6c:	defffe04 	addi	sp,sp,-8
   11c70:	dfc00115 	stw	ra,4(sp)
   11c74:	df000015 	stw	fp,0(sp)
   11c78:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   11c7c:	00800074 	movhi	r2,1
   11c80:	10919604 	addi	r2,r2,18008
   11c84:	10800017 	ldw	r2,0(r2)
   11c88:	10000526 	beq	r2,zero,11ca0 <alt_get_errno+0x34>
   11c8c:	00800074 	movhi	r2,1
   11c90:	10919604 	addi	r2,r2,18008
   11c94:	10800017 	ldw	r2,0(r2)
   11c98:	103ee83a 	callr	r2
   11c9c:	00000206 	br	11ca8 <alt_get_errno+0x3c>
   11ca0:	00800074 	movhi	r2,1
   11ca4:	10973a04 	addi	r2,r2,23784
}
   11ca8:	e037883a 	mov	sp,fp
   11cac:	dfc00117 	ldw	ra,4(sp)
   11cb0:	df000017 	ldw	fp,0(sp)
   11cb4:	dec00204 	addi	sp,sp,8
   11cb8:	f800283a 	ret

00011cbc <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   11cbc:	defffa04 	addi	sp,sp,-24
   11cc0:	dfc00515 	stw	ra,20(sp)
   11cc4:	df000415 	stw	fp,16(sp)
   11cc8:	df000404 	addi	fp,sp,16
   11ccc:	e13ffe15 	stw	r4,-8(fp)
   11cd0:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   11cd4:	e0bffe17 	ldw	r2,-8(fp)
   11cd8:	10000326 	beq	r2,zero,11ce8 <alt_dev_llist_insert+0x2c>
   11cdc:	e0bffe17 	ldw	r2,-8(fp)
   11ce0:	10800217 	ldw	r2,8(r2)
   11ce4:	1000061e 	bne	r2,zero,11d00 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   11ce8:	0011c6c0 	call	11c6c <alt_get_errno>
   11cec:	1007883a 	mov	r3,r2
   11cf0:	00800584 	movi	r2,22
   11cf4:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   11cf8:	00bffa84 	movi	r2,-22
   11cfc:	00001306 	br	11d4c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   11d00:	e0bffe17 	ldw	r2,-8(fp)
   11d04:	e0ffff17 	ldw	r3,-4(fp)
   11d08:	e0fffc15 	stw	r3,-16(fp)
   11d0c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   11d10:	e0bffd17 	ldw	r2,-12(fp)
   11d14:	e0fffc17 	ldw	r3,-16(fp)
   11d18:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   11d1c:	e0bffc17 	ldw	r2,-16(fp)
   11d20:	10c00017 	ldw	r3,0(r2)
   11d24:	e0bffd17 	ldw	r2,-12(fp)
   11d28:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   11d2c:	e0bffc17 	ldw	r2,-16(fp)
   11d30:	10800017 	ldw	r2,0(r2)
   11d34:	e0fffd17 	ldw	r3,-12(fp)
   11d38:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   11d3c:	e0bffc17 	ldw	r2,-16(fp)
   11d40:	e0fffd17 	ldw	r3,-12(fp)
   11d44:	10c00015 	stw	r3,0(r2)

  return 0;  
   11d48:	0005883a 	mov	r2,zero
}
   11d4c:	e037883a 	mov	sp,fp
   11d50:	dfc00117 	ldw	ra,4(sp)
   11d54:	df000017 	ldw	fp,0(sp)
   11d58:	dec00204 	addi	sp,sp,8
   11d5c:	f800283a 	ret

00011d60 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   11d60:	defffd04 	addi	sp,sp,-12
   11d64:	dfc00215 	stw	ra,8(sp)
   11d68:	df000115 	stw	fp,4(sp)
   11d6c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   11d70:	00800074 	movhi	r2,1
   11d74:	108bf004 	addi	r2,r2,12224
   11d78:	e0bfff15 	stw	r2,-4(fp)
   11d7c:	00000606 	br	11d98 <_do_ctors+0x38>
        (*ctor) (); 
   11d80:	e0bfff17 	ldw	r2,-4(fp)
   11d84:	10800017 	ldw	r2,0(r2)
   11d88:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   11d8c:	e0bfff17 	ldw	r2,-4(fp)
   11d90:	10bfff04 	addi	r2,r2,-4
   11d94:	e0bfff15 	stw	r2,-4(fp)
   11d98:	e0ffff17 	ldw	r3,-4(fp)
   11d9c:	00800074 	movhi	r2,1
   11da0:	108bf104 	addi	r2,r2,12228
   11da4:	18bff62e 	bgeu	r3,r2,11d80 <__alt_data_end+0xffff1d80>
        (*ctor) (); 
}
   11da8:	e037883a 	mov	sp,fp
   11dac:	dfc00117 	ldw	ra,4(sp)
   11db0:	df000017 	ldw	fp,0(sp)
   11db4:	dec00204 	addi	sp,sp,8
   11db8:	f800283a 	ret

00011dbc <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   11dbc:	defffd04 	addi	sp,sp,-12
   11dc0:	dfc00215 	stw	ra,8(sp)
   11dc4:	df000115 	stw	fp,4(sp)
   11dc8:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   11dcc:	00800074 	movhi	r2,1
   11dd0:	108bf004 	addi	r2,r2,12224
   11dd4:	e0bfff15 	stw	r2,-4(fp)
   11dd8:	00000606 	br	11df4 <_do_dtors+0x38>
        (*dtor) (); 
   11ddc:	e0bfff17 	ldw	r2,-4(fp)
   11de0:	10800017 	ldw	r2,0(r2)
   11de4:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   11de8:	e0bfff17 	ldw	r2,-4(fp)
   11dec:	10bfff04 	addi	r2,r2,-4
   11df0:	e0bfff15 	stw	r2,-4(fp)
   11df4:	e0ffff17 	ldw	r3,-4(fp)
   11df8:	00800074 	movhi	r2,1
   11dfc:	108bf104 	addi	r2,r2,12228
   11e00:	18bff62e 	bgeu	r3,r2,11ddc <__alt_data_end+0xffff1ddc>
        (*dtor) (); 
}
   11e04:	e037883a 	mov	sp,fp
   11e08:	dfc00117 	ldw	ra,4(sp)
   11e0c:	df000017 	ldw	fp,0(sp)
   11e10:	dec00204 	addi	sp,sp,8
   11e14:	f800283a 	ret

00011e18 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   11e18:	deffff04 	addi	sp,sp,-4
   11e1c:	df000015 	stw	fp,0(sp)
   11e20:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   11e24:	e037883a 	mov	sp,fp
   11e28:	df000017 	ldw	fp,0(sp)
   11e2c:	dec00104 	addi	sp,sp,4
   11e30:	f800283a 	ret

00011e34 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   11e34:	defff904 	addi	sp,sp,-28
   11e38:	dfc00615 	stw	ra,24(sp)
   11e3c:	df000515 	stw	fp,20(sp)
   11e40:	df000504 	addi	fp,sp,20
   11e44:	e13ffc15 	stw	r4,-16(fp)
   11e48:	e17ffd15 	stw	r5,-12(fp)
   11e4c:	e1bffe15 	stw	r6,-8(fp)
   11e50:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   11e54:	e0800217 	ldw	r2,8(fp)
   11e58:	d8800015 	stw	r2,0(sp)
   11e5c:	e13ffc17 	ldw	r4,-16(fp)
   11e60:	e17ffd17 	ldw	r5,-12(fp)
   11e64:	e1bffe17 	ldw	r6,-8(fp)
   11e68:	e1ffff17 	ldw	r7,-4(fp)
   11e6c:	00120140 	call	12014 <alt_iic_isr_register>
}  
   11e70:	e037883a 	mov	sp,fp
   11e74:	dfc00117 	ldw	ra,4(sp)
   11e78:	df000017 	ldw	fp,0(sp)
   11e7c:	dec00204 	addi	sp,sp,8
   11e80:	f800283a 	ret

00011e84 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   11e84:	defff904 	addi	sp,sp,-28
   11e88:	df000615 	stw	fp,24(sp)
   11e8c:	df000604 	addi	fp,sp,24
   11e90:	e13ffe15 	stw	r4,-8(fp)
   11e94:	e17fff15 	stw	r5,-4(fp)
   11e98:	e0bfff17 	ldw	r2,-4(fp)
   11e9c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11ea0:	0005303a 	rdctl	r2,status
   11ea4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11ea8:	e0fffb17 	ldw	r3,-20(fp)
   11eac:	00bfff84 	movi	r2,-2
   11eb0:	1884703a 	and	r2,r3,r2
   11eb4:	1001703a 	wrctl	status,r2
  
  return context;
   11eb8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   11ebc:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   11ec0:	e0bffa17 	ldw	r2,-24(fp)
   11ec4:	00c00044 	movi	r3,1
   11ec8:	1884983a 	sll	r2,r3,r2
   11ecc:	1007883a 	mov	r3,r2
   11ed0:	00800074 	movhi	r2,1
   11ed4:	10973604 	addi	r2,r2,23768
   11ed8:	10800017 	ldw	r2,0(r2)
   11edc:	1886b03a 	or	r3,r3,r2
   11ee0:	00800074 	movhi	r2,1
   11ee4:	10973604 	addi	r2,r2,23768
   11ee8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   11eec:	00800074 	movhi	r2,1
   11ef0:	10973604 	addi	r2,r2,23768
   11ef4:	10800017 	ldw	r2,0(r2)
   11ef8:	100170fa 	wrctl	ienable,r2
   11efc:	e0bffc17 	ldw	r2,-16(fp)
   11f00:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11f04:	e0bffd17 	ldw	r2,-12(fp)
   11f08:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   11f0c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   11f10:	0001883a 	nop
}
   11f14:	e037883a 	mov	sp,fp
   11f18:	df000017 	ldw	fp,0(sp)
   11f1c:	dec00104 	addi	sp,sp,4
   11f20:	f800283a 	ret

00011f24 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   11f24:	defff904 	addi	sp,sp,-28
   11f28:	df000615 	stw	fp,24(sp)
   11f2c:	df000604 	addi	fp,sp,24
   11f30:	e13ffe15 	stw	r4,-8(fp)
   11f34:	e17fff15 	stw	r5,-4(fp)
   11f38:	e0bfff17 	ldw	r2,-4(fp)
   11f3c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11f40:	0005303a 	rdctl	r2,status
   11f44:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11f48:	e0fffb17 	ldw	r3,-20(fp)
   11f4c:	00bfff84 	movi	r2,-2
   11f50:	1884703a 	and	r2,r3,r2
   11f54:	1001703a 	wrctl	status,r2
  
  return context;
   11f58:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   11f5c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   11f60:	e0bffa17 	ldw	r2,-24(fp)
   11f64:	00c00044 	movi	r3,1
   11f68:	1884983a 	sll	r2,r3,r2
   11f6c:	0084303a 	nor	r2,zero,r2
   11f70:	1007883a 	mov	r3,r2
   11f74:	00800074 	movhi	r2,1
   11f78:	10973604 	addi	r2,r2,23768
   11f7c:	10800017 	ldw	r2,0(r2)
   11f80:	1886703a 	and	r3,r3,r2
   11f84:	00800074 	movhi	r2,1
   11f88:	10973604 	addi	r2,r2,23768
   11f8c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   11f90:	00800074 	movhi	r2,1
   11f94:	10973604 	addi	r2,r2,23768
   11f98:	10800017 	ldw	r2,0(r2)
   11f9c:	100170fa 	wrctl	ienable,r2
   11fa0:	e0bffc17 	ldw	r2,-16(fp)
   11fa4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11fa8:	e0bffd17 	ldw	r2,-12(fp)
   11fac:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   11fb0:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   11fb4:	0001883a 	nop
}
   11fb8:	e037883a 	mov	sp,fp
   11fbc:	df000017 	ldw	fp,0(sp)
   11fc0:	dec00104 	addi	sp,sp,4
   11fc4:	f800283a 	ret

00011fc8 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   11fc8:	defffc04 	addi	sp,sp,-16
   11fcc:	df000315 	stw	fp,12(sp)
   11fd0:	df000304 	addi	fp,sp,12
   11fd4:	e13ffe15 	stw	r4,-8(fp)
   11fd8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   11fdc:	000530fa 	rdctl	r2,ienable
   11fe0:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   11fe4:	e0bfff17 	ldw	r2,-4(fp)
   11fe8:	00c00044 	movi	r3,1
   11fec:	1884983a 	sll	r2,r3,r2
   11ff0:	1007883a 	mov	r3,r2
   11ff4:	e0bffd17 	ldw	r2,-12(fp)
   11ff8:	1884703a 	and	r2,r3,r2
   11ffc:	1004c03a 	cmpne	r2,r2,zero
   12000:	10803fcc 	andi	r2,r2,255
}
   12004:	e037883a 	mov	sp,fp
   12008:	df000017 	ldw	fp,0(sp)
   1200c:	dec00104 	addi	sp,sp,4
   12010:	f800283a 	ret

00012014 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   12014:	defff504 	addi	sp,sp,-44
   12018:	dfc00a15 	stw	ra,40(sp)
   1201c:	df000915 	stw	fp,36(sp)
   12020:	df000904 	addi	fp,sp,36
   12024:	e13ffc15 	stw	r4,-16(fp)
   12028:	e17ffd15 	stw	r5,-12(fp)
   1202c:	e1bffe15 	stw	r6,-8(fp)
   12030:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   12034:	00bffa84 	movi	r2,-22
   12038:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   1203c:	e0bffd17 	ldw	r2,-12(fp)
   12040:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   12044:	e0bff817 	ldw	r2,-32(fp)
   12048:	10800808 	cmpgei	r2,r2,32
   1204c:	1000271e 	bne	r2,zero,120ec <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12050:	0005303a 	rdctl	r2,status
   12054:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12058:	e0fffa17 	ldw	r3,-24(fp)
   1205c:	00bfff84 	movi	r2,-2
   12060:	1884703a 	and	r2,r3,r2
   12064:	1001703a 	wrctl	status,r2
  
  return context;
   12068:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   1206c:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
   12070:	00800074 	movhi	r2,1
   12074:	10973b04 	addi	r2,r2,23788
   12078:	e0fff817 	ldw	r3,-32(fp)
   1207c:	180690fa 	slli	r3,r3,3
   12080:	10c5883a 	add	r2,r2,r3
   12084:	e0fffe17 	ldw	r3,-8(fp)
   12088:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   1208c:	00800074 	movhi	r2,1
   12090:	10973b04 	addi	r2,r2,23788
   12094:	e0fff817 	ldw	r3,-32(fp)
   12098:	180690fa 	slli	r3,r3,3
   1209c:	18c00104 	addi	r3,r3,4
   120a0:	10c5883a 	add	r2,r2,r3
   120a4:	e0ffff17 	ldw	r3,-4(fp)
   120a8:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   120ac:	e0bffe17 	ldw	r2,-8(fp)
   120b0:	10000526 	beq	r2,zero,120c8 <alt_iic_isr_register+0xb4>
   120b4:	e0bff817 	ldw	r2,-32(fp)
   120b8:	e13ffc17 	ldw	r4,-16(fp)
   120bc:	100b883a 	mov	r5,r2
   120c0:	0011e840 	call	11e84 <alt_ic_irq_enable>
   120c4:	00000406 	br	120d8 <alt_iic_isr_register+0xc4>
   120c8:	e0bff817 	ldw	r2,-32(fp)
   120cc:	e13ffc17 	ldw	r4,-16(fp)
   120d0:	100b883a 	mov	r5,r2
   120d4:	0011f240 	call	11f24 <alt_ic_irq_disable>
   120d8:	e0bff715 	stw	r2,-36(fp)
   120dc:	e0bff917 	ldw	r2,-28(fp)
   120e0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   120e4:	e0bffb17 	ldw	r2,-20(fp)
   120e8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   120ec:	e0bff717 	ldw	r2,-36(fp)
}
   120f0:	e037883a 	mov	sp,fp
   120f4:	dfc00117 	ldw	ra,4(sp)
   120f8:	df000017 	ldw	fp,0(sp)
   120fc:	dec00204 	addi	sp,sp,8
   12100:	f800283a 	ret

00012104 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   12104:	defff804 	addi	sp,sp,-32
   12108:	dfc00715 	stw	ra,28(sp)
   1210c:	df000615 	stw	fp,24(sp)
   12110:	dc000515 	stw	r16,20(sp)
   12114:	df000604 	addi	fp,sp,24
   12118:	e13ffb15 	stw	r4,-20(fp)
   1211c:	e17ffc15 	stw	r5,-16(fp)
   12120:	e1bffd15 	stw	r6,-12(fp)
   12124:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   12128:	e13ffc17 	ldw	r4,-16(fp)
   1212c:	e17ffd17 	ldw	r5,-12(fp)
   12130:	e1bffe17 	ldw	r6,-8(fp)
   12134:	00123a00 	call	123a0 <open>
   12138:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   1213c:	e0bffa17 	ldw	r2,-24(fp)
   12140:	10002216 	blt	r2,zero,121cc <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   12144:	04000074 	movhi	r16,1
   12148:	84102704 	addi	r16,r16,16540
   1214c:	e0bffa17 	ldw	r2,-24(fp)
   12150:	1009883a 	mov	r4,r2
   12154:	01400304 	movi	r5,12
   12158:	0010c240 	call	10c24 <__mulsi3>
   1215c:	8085883a 	add	r2,r16,r2
   12160:	10c00017 	ldw	r3,0(r2)
   12164:	e0bffb17 	ldw	r2,-20(fp)
   12168:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   1216c:	04000074 	movhi	r16,1
   12170:	84102704 	addi	r16,r16,16540
   12174:	e0bffa17 	ldw	r2,-24(fp)
   12178:	1009883a 	mov	r4,r2
   1217c:	01400304 	movi	r5,12
   12180:	0010c240 	call	10c24 <__mulsi3>
   12184:	10800104 	addi	r2,r2,4
   12188:	8085883a 	add	r2,r16,r2
   1218c:	10c00017 	ldw	r3,0(r2)
   12190:	e0bffb17 	ldw	r2,-20(fp)
   12194:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   12198:	04000074 	movhi	r16,1
   1219c:	84102704 	addi	r16,r16,16540
   121a0:	e0bffa17 	ldw	r2,-24(fp)
   121a4:	1009883a 	mov	r4,r2
   121a8:	01400304 	movi	r5,12
   121ac:	0010c240 	call	10c24 <__mulsi3>
   121b0:	10800204 	addi	r2,r2,8
   121b4:	8085883a 	add	r2,r16,r2
   121b8:	10c00017 	ldw	r3,0(r2)
   121bc:	e0bffb17 	ldw	r2,-20(fp)
   121c0:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   121c4:	e13ffa17 	ldw	r4,-24(fp)
   121c8:	00125000 	call	12500 <alt_release_fd>
  }
} 
   121cc:	e6ffff04 	addi	sp,fp,-4
   121d0:	dfc00217 	ldw	ra,8(sp)
   121d4:	df000117 	ldw	fp,4(sp)
   121d8:	dc000017 	ldw	r16,0(sp)
   121dc:	dec00304 	addi	sp,sp,12
   121e0:	f800283a 	ret

000121e4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   121e4:	defffb04 	addi	sp,sp,-20
   121e8:	dfc00415 	stw	ra,16(sp)
   121ec:	df000315 	stw	fp,12(sp)
   121f0:	df000304 	addi	fp,sp,12
   121f4:	e13ffd15 	stw	r4,-12(fp)
   121f8:	e17ffe15 	stw	r5,-8(fp)
   121fc:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   12200:	01000074 	movhi	r4,1
   12204:	21102a04 	addi	r4,r4,16552
   12208:	e17ffd17 	ldw	r5,-12(fp)
   1220c:	01800044 	movi	r6,1
   12210:	01c07fc4 	movi	r7,511
   12214:	00121040 	call	12104 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   12218:	01000074 	movhi	r4,1
   1221c:	21102704 	addi	r4,r4,16540
   12220:	e17ffe17 	ldw	r5,-8(fp)
   12224:	000d883a 	mov	r6,zero
   12228:	01c07fc4 	movi	r7,511
   1222c:	00121040 	call	12104 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   12230:	01000074 	movhi	r4,1
   12234:	21102d04 	addi	r4,r4,16564
   12238:	e17fff17 	ldw	r5,-4(fp)
   1223c:	01800044 	movi	r6,1
   12240:	01c07fc4 	movi	r7,511
   12244:	00121040 	call	12104 <alt_open_fd>
}  
   12248:	e037883a 	mov	sp,fp
   1224c:	dfc00117 	ldw	ra,4(sp)
   12250:	df000017 	ldw	fp,0(sp)
   12254:	dec00204 	addi	sp,sp,8
   12258:	f800283a 	ret

0001225c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1225c:	defffe04 	addi	sp,sp,-8
   12260:	dfc00115 	stw	ra,4(sp)
   12264:	df000015 	stw	fp,0(sp)
   12268:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1226c:	00800074 	movhi	r2,1
   12270:	10919604 	addi	r2,r2,18008
   12274:	10800017 	ldw	r2,0(r2)
   12278:	10000526 	beq	r2,zero,12290 <alt_get_errno+0x34>
   1227c:	00800074 	movhi	r2,1
   12280:	10919604 	addi	r2,r2,18008
   12284:	10800017 	ldw	r2,0(r2)
   12288:	103ee83a 	callr	r2
   1228c:	00000206 	br	12298 <alt_get_errno+0x3c>
   12290:	00800074 	movhi	r2,1
   12294:	10973a04 	addi	r2,r2,23784
}
   12298:	e037883a 	mov	sp,fp
   1229c:	dfc00117 	ldw	ra,4(sp)
   122a0:	df000017 	ldw	fp,0(sp)
   122a4:	dec00204 	addi	sp,sp,8
   122a8:	f800283a 	ret

000122ac <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   122ac:	defffb04 	addi	sp,sp,-20
   122b0:	dfc00415 	stw	ra,16(sp)
   122b4:	df000315 	stw	fp,12(sp)
   122b8:	dc000215 	stw	r16,8(sp)
   122bc:	df000304 	addi	fp,sp,12
   122c0:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   122c4:	e0bffe17 	ldw	r2,-8(fp)
   122c8:	10800217 	ldw	r2,8(r2)
   122cc:	10d00034 	orhi	r3,r2,16384
   122d0:	e0bffe17 	ldw	r2,-8(fp)
   122d4:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   122d8:	e03ffd15 	stw	zero,-12(fp)
   122dc:	00002306 	br	1236c <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   122e0:	04000074 	movhi	r16,1
   122e4:	84102704 	addi	r16,r16,16540
   122e8:	e0bffd17 	ldw	r2,-12(fp)
   122ec:	1009883a 	mov	r4,r2
   122f0:	01400304 	movi	r5,12
   122f4:	0010c240 	call	10c24 <__mulsi3>
   122f8:	8085883a 	add	r2,r16,r2
   122fc:	10c00017 	ldw	r3,0(r2)
   12300:	e0bffe17 	ldw	r2,-8(fp)
   12304:	10800017 	ldw	r2,0(r2)
   12308:	1880151e 	bne	r3,r2,12360 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   1230c:	04000074 	movhi	r16,1
   12310:	84102704 	addi	r16,r16,16540
   12314:	e0bffd17 	ldw	r2,-12(fp)
   12318:	1009883a 	mov	r4,r2
   1231c:	01400304 	movi	r5,12
   12320:	0010c240 	call	10c24 <__mulsi3>
   12324:	10800204 	addi	r2,r2,8
   12328:	8085883a 	add	r2,r16,r2
   1232c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   12330:	10000b0e 	bge	r2,zero,12360 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   12334:	e13ffd17 	ldw	r4,-12(fp)
   12338:	01400304 	movi	r5,12
   1233c:	0010c240 	call	10c24 <__mulsi3>
   12340:	1007883a 	mov	r3,r2
   12344:	00800074 	movhi	r2,1
   12348:	10902704 	addi	r2,r2,16540
   1234c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   12350:	e0bffe17 	ldw	r2,-8(fp)
   12354:	18800226 	beq	r3,r2,12360 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   12358:	00bffcc4 	movi	r2,-13
   1235c:	00000a06 	br	12388 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   12360:	e0bffd17 	ldw	r2,-12(fp)
   12364:	10800044 	addi	r2,r2,1
   12368:	e0bffd15 	stw	r2,-12(fp)
   1236c:	00800074 	movhi	r2,1
   12370:	10919504 	addi	r2,r2,18004
   12374:	10800017 	ldw	r2,0(r2)
   12378:	1007883a 	mov	r3,r2
   1237c:	e0bffd17 	ldw	r2,-12(fp)
   12380:	18bfd72e 	bgeu	r3,r2,122e0 <__alt_data_end+0xffff22e0>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   12384:	0005883a 	mov	r2,zero
}
   12388:	e6ffff04 	addi	sp,fp,-4
   1238c:	dfc00217 	ldw	ra,8(sp)
   12390:	df000117 	ldw	fp,4(sp)
   12394:	dc000017 	ldw	r16,0(sp)
   12398:	dec00304 	addi	sp,sp,12
   1239c:	f800283a 	ret

000123a0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   123a0:	defff604 	addi	sp,sp,-40
   123a4:	dfc00915 	stw	ra,36(sp)
   123a8:	df000815 	stw	fp,32(sp)
   123ac:	df000804 	addi	fp,sp,32
   123b0:	e13ffd15 	stw	r4,-12(fp)
   123b4:	e17ffe15 	stw	r5,-8(fp)
   123b8:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   123bc:	00bfffc4 	movi	r2,-1
   123c0:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   123c4:	00bffb44 	movi	r2,-19
   123c8:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   123cc:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   123d0:	e13ffd17 	ldw	r4,-12(fp)
   123d4:	01400074 	movhi	r5,1
   123d8:	29519304 	addi	r5,r5,17996
   123dc:	001273c0 	call	1273c <alt_find_dev>
   123e0:	e0bff815 	stw	r2,-32(fp)
   123e4:	e0bff817 	ldw	r2,-32(fp)
   123e8:	1000051e 	bne	r2,zero,12400 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   123ec:	e13ffd17 	ldw	r4,-12(fp)
   123f0:	00127cc0 	call	127cc <alt_find_file>
   123f4:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   123f8:	00800044 	movi	r2,1
   123fc:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   12400:	e0bff817 	ldw	r2,-32(fp)
   12404:	10002b26 	beq	r2,zero,124b4 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
   12408:	e13ff817 	ldw	r4,-32(fp)
   1240c:	00128e00 	call	128e0 <alt_get_fd>
   12410:	e0bff915 	stw	r2,-28(fp)
   12414:	e0bff917 	ldw	r2,-28(fp)
   12418:	1000030e 	bge	r2,zero,12428 <open+0x88>
    {
      status = index;
   1241c:	e0bff917 	ldw	r2,-28(fp)
   12420:	e0bffa15 	stw	r2,-24(fp)
   12424:	00002506 	br	124bc <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
   12428:	e13ff917 	ldw	r4,-28(fp)
   1242c:	01400304 	movi	r5,12
   12430:	0010c240 	call	10c24 <__mulsi3>
   12434:	1007883a 	mov	r3,r2
   12438:	00800074 	movhi	r2,1
   1243c:	10902704 	addi	r2,r2,16540
   12440:	1885883a 	add	r2,r3,r2
   12444:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   12448:	e0fffe17 	ldw	r3,-8(fp)
   1244c:	00900034 	movhi	r2,16384
   12450:	10bfffc4 	addi	r2,r2,-1
   12454:	1886703a 	and	r3,r3,r2
   12458:	e0bffc17 	ldw	r2,-16(fp)
   1245c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   12460:	e0bffb17 	ldw	r2,-20(fp)
   12464:	1000051e 	bne	r2,zero,1247c <open+0xdc>
   12468:	e13ffc17 	ldw	r4,-16(fp)
   1246c:	00122ac0 	call	122ac <alt_file_locked>
   12470:	e0bffa15 	stw	r2,-24(fp)
   12474:	e0bffa17 	ldw	r2,-24(fp)
   12478:	10001016 	blt	r2,zero,124bc <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   1247c:	e0bff817 	ldw	r2,-32(fp)
   12480:	10800317 	ldw	r2,12(r2)
   12484:	10000826 	beq	r2,zero,124a8 <open+0x108>
   12488:	e0bff817 	ldw	r2,-32(fp)
   1248c:	10800317 	ldw	r2,12(r2)
   12490:	e13ffc17 	ldw	r4,-16(fp)
   12494:	e17ffd17 	ldw	r5,-12(fp)
   12498:	e1bffe17 	ldw	r6,-8(fp)
   1249c:	e1ffff17 	ldw	r7,-4(fp)
   124a0:	103ee83a 	callr	r2
   124a4:	00000106 	br	124ac <open+0x10c>
   124a8:	0005883a 	mov	r2,zero
   124ac:	e0bffa15 	stw	r2,-24(fp)
   124b0:	00000206 	br	124bc <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
   124b4:	00bffb44 	movi	r2,-19
   124b8:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   124bc:	e0bffa17 	ldw	r2,-24(fp)
   124c0:	1000090e 	bge	r2,zero,124e8 <open+0x148>
  {
    alt_release_fd (index);  
   124c4:	e13ff917 	ldw	r4,-28(fp)
   124c8:	00125000 	call	12500 <alt_release_fd>
    ALT_ERRNO = -status;
   124cc:	001225c0 	call	1225c <alt_get_errno>
   124d0:	1007883a 	mov	r3,r2
   124d4:	e0bffa17 	ldw	r2,-24(fp)
   124d8:	0085c83a 	sub	r2,zero,r2
   124dc:	18800015 	stw	r2,0(r3)
    return -1;
   124e0:	00bfffc4 	movi	r2,-1
   124e4:	00000106 	br	124ec <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
   124e8:	e0bff917 	ldw	r2,-28(fp)
}
   124ec:	e037883a 	mov	sp,fp
   124f0:	dfc00117 	ldw	ra,4(sp)
   124f4:	df000017 	ldw	fp,0(sp)
   124f8:	dec00204 	addi	sp,sp,8
   124fc:	f800283a 	ret

00012500 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   12500:	defffc04 	addi	sp,sp,-16
   12504:	dfc00315 	stw	ra,12(sp)
   12508:	df000215 	stw	fp,8(sp)
   1250c:	dc000115 	stw	r16,4(sp)
   12510:	df000204 	addi	fp,sp,8
   12514:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   12518:	e0bffe17 	ldw	r2,-8(fp)
   1251c:	108000d0 	cmplti	r2,r2,3
   12520:	1000111e 	bne	r2,zero,12568 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   12524:	04000074 	movhi	r16,1
   12528:	84102704 	addi	r16,r16,16540
   1252c:	e0bffe17 	ldw	r2,-8(fp)
   12530:	1009883a 	mov	r4,r2
   12534:	01400304 	movi	r5,12
   12538:	0010c240 	call	10c24 <__mulsi3>
   1253c:	10800204 	addi	r2,r2,8
   12540:	8085883a 	add	r2,r16,r2
   12544:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   12548:	04000074 	movhi	r16,1
   1254c:	84102704 	addi	r16,r16,16540
   12550:	e0bffe17 	ldw	r2,-8(fp)
   12554:	1009883a 	mov	r4,r2
   12558:	01400304 	movi	r5,12
   1255c:	0010c240 	call	10c24 <__mulsi3>
   12560:	8085883a 	add	r2,r16,r2
   12564:	10000015 	stw	zero,0(r2)
  }
}
   12568:	e6ffff04 	addi	sp,fp,-4
   1256c:	dfc00217 	ldw	ra,8(sp)
   12570:	df000117 	ldw	fp,4(sp)
   12574:	dc000017 	ldw	r16,0(sp)
   12578:	dec00304 	addi	sp,sp,12
   1257c:	f800283a 	ret

00012580 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   12580:	defffa04 	addi	sp,sp,-24
   12584:	df000515 	stw	fp,20(sp)
   12588:	df000504 	addi	fp,sp,20
   1258c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12590:	0005303a 	rdctl	r2,status
   12594:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12598:	e0fffc17 	ldw	r3,-16(fp)
   1259c:	00bfff84 	movi	r2,-2
   125a0:	1884703a 	and	r2,r3,r2
   125a4:	1001703a 	wrctl	status,r2
  
  return context;
   125a8:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   125ac:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   125b0:	e0bfff17 	ldw	r2,-4(fp)
   125b4:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   125b8:	e0bffd17 	ldw	r2,-12(fp)
   125bc:	10800017 	ldw	r2,0(r2)
   125c0:	e0fffd17 	ldw	r3,-12(fp)
   125c4:	18c00117 	ldw	r3,4(r3)
   125c8:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   125cc:	e0bffd17 	ldw	r2,-12(fp)
   125d0:	10800117 	ldw	r2,4(r2)
   125d4:	e0fffd17 	ldw	r3,-12(fp)
   125d8:	18c00017 	ldw	r3,0(r3)
   125dc:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   125e0:	e0bffd17 	ldw	r2,-12(fp)
   125e4:	e0fffd17 	ldw	r3,-12(fp)
   125e8:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   125ec:	e0bffd17 	ldw	r2,-12(fp)
   125f0:	e0fffd17 	ldw	r3,-12(fp)
   125f4:	10c00015 	stw	r3,0(r2)
   125f8:	e0bffb17 	ldw	r2,-20(fp)
   125fc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12600:	e0bffe17 	ldw	r2,-8(fp)
   12604:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   12608:	e037883a 	mov	sp,fp
   1260c:	df000017 	ldw	fp,0(sp)
   12610:	dec00104 	addi	sp,sp,4
   12614:	f800283a 	ret

00012618 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   12618:	defffb04 	addi	sp,sp,-20
   1261c:	dfc00415 	stw	ra,16(sp)
   12620:	df000315 	stw	fp,12(sp)
   12624:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   12628:	d0a00817 	ldw	r2,-32736(gp)
   1262c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   12630:	d0a5a817 	ldw	r2,-26976(gp)
   12634:	10800044 	addi	r2,r2,1
   12638:	d0a5a815 	stw	r2,-26976(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   1263c:	00002e06 	br	126f8 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   12640:	e0bffd17 	ldw	r2,-12(fp)
   12644:	10800017 	ldw	r2,0(r2)
   12648:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   1264c:	e0bffd17 	ldw	r2,-12(fp)
   12650:	10800403 	ldbu	r2,16(r2)
   12654:	10803fcc 	andi	r2,r2,255
   12658:	10000426 	beq	r2,zero,1266c <alt_tick+0x54>
   1265c:	d0a5a817 	ldw	r2,-26976(gp)
   12660:	1000021e 	bne	r2,zero,1266c <alt_tick+0x54>
    {
      alarm->rollover = 0;
   12664:	e0bffd17 	ldw	r2,-12(fp)
   12668:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   1266c:	e0bffd17 	ldw	r2,-12(fp)
   12670:	10800217 	ldw	r2,8(r2)
   12674:	d0e5a817 	ldw	r3,-26976(gp)
   12678:	18801d36 	bltu	r3,r2,126f0 <alt_tick+0xd8>
   1267c:	e0bffd17 	ldw	r2,-12(fp)
   12680:	10800403 	ldbu	r2,16(r2)
   12684:	10803fcc 	andi	r2,r2,255
   12688:	1000191e 	bne	r2,zero,126f0 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   1268c:	e0bffd17 	ldw	r2,-12(fp)
   12690:	10800317 	ldw	r2,12(r2)
   12694:	e0fffd17 	ldw	r3,-12(fp)
   12698:	18c00517 	ldw	r3,20(r3)
   1269c:	1809883a 	mov	r4,r3
   126a0:	103ee83a 	callr	r2
   126a4:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   126a8:	e0bfff17 	ldw	r2,-4(fp)
   126ac:	1000031e 	bne	r2,zero,126bc <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   126b0:	e13ffd17 	ldw	r4,-12(fp)
   126b4:	00125800 	call	12580 <alt_alarm_stop>
   126b8:	00000d06 	br	126f0 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   126bc:	e0bffd17 	ldw	r2,-12(fp)
   126c0:	10c00217 	ldw	r3,8(r2)
   126c4:	e0bfff17 	ldw	r2,-4(fp)
   126c8:	1887883a 	add	r3,r3,r2
   126cc:	e0bffd17 	ldw	r2,-12(fp)
   126d0:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   126d4:	e0bffd17 	ldw	r2,-12(fp)
   126d8:	10c00217 	ldw	r3,8(r2)
   126dc:	d0a5a817 	ldw	r2,-26976(gp)
   126e0:	1880032e 	bgeu	r3,r2,126f0 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   126e4:	e0bffd17 	ldw	r2,-12(fp)
   126e8:	00c00044 	movi	r3,1
   126ec:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   126f0:	e0bffe17 	ldw	r2,-8(fp)
   126f4:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   126f8:	e0fffd17 	ldw	r3,-12(fp)
   126fc:	d0a00804 	addi	r2,gp,-32736
   12700:	18bfcf1e 	bne	r3,r2,12640 <__alt_data_end+0xffff2640>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   12704:	0001883a 	nop
}
   12708:	e037883a 	mov	sp,fp
   1270c:	dfc00117 	ldw	ra,4(sp)
   12710:	df000017 	ldw	fp,0(sp)
   12714:	dec00204 	addi	sp,sp,8
   12718:	f800283a 	ret

0001271c <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   1271c:	deffff04 	addi	sp,sp,-4
   12720:	df000015 	stw	fp,0(sp)
   12724:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   12728:	000170fa 	wrctl	ienable,zero
}
   1272c:	e037883a 	mov	sp,fp
   12730:	df000017 	ldw	fp,0(sp)
   12734:	dec00104 	addi	sp,sp,4
   12738:	f800283a 	ret

0001273c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   1273c:	defffa04 	addi	sp,sp,-24
   12740:	dfc00515 	stw	ra,20(sp)
   12744:	df000415 	stw	fp,16(sp)
   12748:	df000404 	addi	fp,sp,16
   1274c:	e13ffe15 	stw	r4,-8(fp)
   12750:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   12754:	e0bfff17 	ldw	r2,-4(fp)
   12758:	10800017 	ldw	r2,0(r2)
   1275c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   12760:	e13ffe17 	ldw	r4,-8(fp)
   12764:	0012c500 	call	12c50 <strlen>
   12768:	10800044 	addi	r2,r2,1
   1276c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   12770:	00000d06 	br	127a8 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   12774:	e0bffc17 	ldw	r2,-16(fp)
   12778:	10c00217 	ldw	r3,8(r2)
   1277c:	e0bffd17 	ldw	r2,-12(fp)
   12780:	1809883a 	mov	r4,r3
   12784:	e17ffe17 	ldw	r5,-8(fp)
   12788:	100d883a 	mov	r6,r2
   1278c:	0012a9c0 	call	12a9c <memcmp>
   12790:	1000021e 	bne	r2,zero,1279c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   12794:	e0bffc17 	ldw	r2,-16(fp)
   12798:	00000706 	br	127b8 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   1279c:	e0bffc17 	ldw	r2,-16(fp)
   127a0:	10800017 	ldw	r2,0(r2)
   127a4:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   127a8:	e0fffc17 	ldw	r3,-16(fp)
   127ac:	e0bfff17 	ldw	r2,-4(fp)
   127b0:	18bff01e 	bne	r3,r2,12774 <__alt_data_end+0xffff2774>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   127b4:	0005883a 	mov	r2,zero
}
   127b8:	e037883a 	mov	sp,fp
   127bc:	dfc00117 	ldw	ra,4(sp)
   127c0:	df000017 	ldw	fp,0(sp)
   127c4:	dec00204 	addi	sp,sp,8
   127c8:	f800283a 	ret

000127cc <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   127cc:	defffb04 	addi	sp,sp,-20
   127d0:	dfc00415 	stw	ra,16(sp)
   127d4:	df000315 	stw	fp,12(sp)
   127d8:	df000304 	addi	fp,sp,12
   127dc:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   127e0:	00800074 	movhi	r2,1
   127e4:	10919104 	addi	r2,r2,17988
   127e8:	10800017 	ldw	r2,0(r2)
   127ec:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   127f0:	00003106 	br	128b8 <alt_find_file+0xec>
  {
    len = strlen(next->name);
   127f4:	e0bffd17 	ldw	r2,-12(fp)
   127f8:	10800217 	ldw	r2,8(r2)
   127fc:	1009883a 	mov	r4,r2
   12800:	0012c500 	call	12c50 <strlen>
   12804:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   12808:	e0bffd17 	ldw	r2,-12(fp)
   1280c:	10c00217 	ldw	r3,8(r2)
   12810:	e0bffe17 	ldw	r2,-8(fp)
   12814:	10bfffc4 	addi	r2,r2,-1
   12818:	1885883a 	add	r2,r3,r2
   1281c:	10800003 	ldbu	r2,0(r2)
   12820:	10803fcc 	andi	r2,r2,255
   12824:	1080201c 	xori	r2,r2,128
   12828:	10bfe004 	addi	r2,r2,-128
   1282c:	10800bd8 	cmpnei	r2,r2,47
   12830:	1000031e 	bne	r2,zero,12840 <alt_find_file+0x74>
    {
      len -= 1;
   12834:	e0bffe17 	ldw	r2,-8(fp)
   12838:	10bfffc4 	addi	r2,r2,-1
   1283c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   12840:	e0bffe17 	ldw	r2,-8(fp)
   12844:	e0ffff17 	ldw	r3,-4(fp)
   12848:	1885883a 	add	r2,r3,r2
   1284c:	10800003 	ldbu	r2,0(r2)
   12850:	10803fcc 	andi	r2,r2,255
   12854:	1080201c 	xori	r2,r2,128
   12858:	10bfe004 	addi	r2,r2,-128
   1285c:	10800be0 	cmpeqi	r2,r2,47
   12860:	1000081e 	bne	r2,zero,12884 <alt_find_file+0xb8>
   12864:	e0bffe17 	ldw	r2,-8(fp)
   12868:	e0ffff17 	ldw	r3,-4(fp)
   1286c:	1885883a 	add	r2,r3,r2
   12870:	10800003 	ldbu	r2,0(r2)
   12874:	10803fcc 	andi	r2,r2,255
   12878:	1080201c 	xori	r2,r2,128
   1287c:	10bfe004 	addi	r2,r2,-128
   12880:	10000a1e 	bne	r2,zero,128ac <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   12884:	e0bffd17 	ldw	r2,-12(fp)
   12888:	10c00217 	ldw	r3,8(r2)
   1288c:	e0bffe17 	ldw	r2,-8(fp)
   12890:	1809883a 	mov	r4,r3
   12894:	e17fff17 	ldw	r5,-4(fp)
   12898:	100d883a 	mov	r6,r2
   1289c:	0012a9c0 	call	12a9c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   128a0:	1000021e 	bne	r2,zero,128ac <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   128a4:	e0bffd17 	ldw	r2,-12(fp)
   128a8:	00000806 	br	128cc <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   128ac:	e0bffd17 	ldw	r2,-12(fp)
   128b0:	10800017 	ldw	r2,0(r2)
   128b4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   128b8:	e0fffd17 	ldw	r3,-12(fp)
   128bc:	00800074 	movhi	r2,1
   128c0:	10919104 	addi	r2,r2,17988
   128c4:	18bfcb1e 	bne	r3,r2,127f4 <__alt_data_end+0xffff27f4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   128c8:	0005883a 	mov	r2,zero
}
   128cc:	e037883a 	mov	sp,fp
   128d0:	dfc00117 	ldw	ra,4(sp)
   128d4:	df000017 	ldw	fp,0(sp)
   128d8:	dec00204 	addi	sp,sp,8
   128dc:	f800283a 	ret

000128e0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   128e0:	defffa04 	addi	sp,sp,-24
   128e4:	dfc00515 	stw	ra,20(sp)
   128e8:	df000415 	stw	fp,16(sp)
   128ec:	dc000315 	stw	r16,12(sp)
   128f0:	df000404 	addi	fp,sp,16
   128f4:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   128f8:	00bffa04 	movi	r2,-24
   128fc:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   12900:	e03ffc15 	stw	zero,-16(fp)
   12904:	00002106 	br	1298c <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
   12908:	04000074 	movhi	r16,1
   1290c:	84102704 	addi	r16,r16,16540
   12910:	e0bffc17 	ldw	r2,-16(fp)
   12914:	1009883a 	mov	r4,r2
   12918:	01400304 	movi	r5,12
   1291c:	0010c240 	call	10c24 <__mulsi3>
   12920:	8085883a 	add	r2,r16,r2
   12924:	10800017 	ldw	r2,0(r2)
   12928:	1000151e 	bne	r2,zero,12980 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
   1292c:	04000074 	movhi	r16,1
   12930:	84102704 	addi	r16,r16,16540
   12934:	e0bffc17 	ldw	r2,-16(fp)
   12938:	1009883a 	mov	r4,r2
   1293c:	01400304 	movi	r5,12
   12940:	0010c240 	call	10c24 <__mulsi3>
   12944:	8085883a 	add	r2,r16,r2
   12948:	e0fffe17 	ldw	r3,-8(fp)
   1294c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   12950:	00800074 	movhi	r2,1
   12954:	10919504 	addi	r2,r2,18004
   12958:	10c00017 	ldw	r3,0(r2)
   1295c:	e0bffc17 	ldw	r2,-16(fp)
   12960:	1880040e 	bge	r3,r2,12974 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
   12964:	00800074 	movhi	r2,1
   12968:	10919504 	addi	r2,r2,18004
   1296c:	e0fffc17 	ldw	r3,-16(fp)
   12970:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   12974:	e0bffc17 	ldw	r2,-16(fp)
   12978:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   1297c:	00000606 	br	12998 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   12980:	e0bffc17 	ldw	r2,-16(fp)
   12984:	10800044 	addi	r2,r2,1
   12988:	e0bffc15 	stw	r2,-16(fp)
   1298c:	e0bffc17 	ldw	r2,-16(fp)
   12990:	10800810 	cmplti	r2,r2,32
   12994:	103fdc1e 	bne	r2,zero,12908 <__alt_data_end+0xffff2908>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   12998:	e0bffd17 	ldw	r2,-12(fp)
}
   1299c:	e6ffff04 	addi	sp,fp,-4
   129a0:	dfc00217 	ldw	ra,8(sp)
   129a4:	df000117 	ldw	fp,4(sp)
   129a8:	dc000017 	ldw	r16,0(sp)
   129ac:	dec00304 	addi	sp,sp,12
   129b0:	f800283a 	ret

000129b4 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   129b4:	defffe04 	addi	sp,sp,-8
   129b8:	df000115 	stw	fp,4(sp)
   129bc:	df000104 	addi	fp,sp,4
   129c0:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   129c4:	e0bfff17 	ldw	r2,-4(fp)
   129c8:	10bffe84 	addi	r2,r2,-6
   129cc:	10c00428 	cmpgeui	r3,r2,16
   129d0:	18001a1e 	bne	r3,zero,12a3c <alt_exception_cause_generated_bad_addr+0x88>
   129d4:	100690ba 	slli	r3,r2,2
   129d8:	00800074 	movhi	r2,1
   129dc:	108a7b04 	addi	r2,r2,10732
   129e0:	1885883a 	add	r2,r3,r2
   129e4:	10800017 	ldw	r2,0(r2)
   129e8:	1000683a 	jmp	r2
   129ec:	00012a2c 	andhi	zero,zero,1192
   129f0:	00012a2c 	andhi	zero,zero,1192
   129f4:	00012a3c 	xorhi	zero,zero,1192
   129f8:	00012a3c 	xorhi	zero,zero,1192
   129fc:	00012a3c 	xorhi	zero,zero,1192
   12a00:	00012a2c 	andhi	zero,zero,1192
   12a04:	00012a34 	movhi	zero,1192
   12a08:	00012a3c 	xorhi	zero,zero,1192
   12a0c:	00012a2c 	andhi	zero,zero,1192
   12a10:	00012a2c 	andhi	zero,zero,1192
   12a14:	00012a3c 	xorhi	zero,zero,1192
   12a18:	00012a2c 	andhi	zero,zero,1192
   12a1c:	00012a34 	movhi	zero,1192
   12a20:	00012a3c 	xorhi	zero,zero,1192
   12a24:	00012a3c 	xorhi	zero,zero,1192
   12a28:	00012a2c 	andhi	zero,zero,1192
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   12a2c:	00800044 	movi	r2,1
   12a30:	00000306 	br	12a40 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   12a34:	0005883a 	mov	r2,zero
   12a38:	00000106 	br	12a40 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   12a3c:	0005883a 	mov	r2,zero
  }
}
   12a40:	e037883a 	mov	sp,fp
   12a44:	df000017 	ldw	fp,0(sp)
   12a48:	dec00104 	addi	sp,sp,4
   12a4c:	f800283a 	ret

00012a50 <atexit>:
   12a50:	200b883a 	mov	r5,r4
   12a54:	000d883a 	mov	r6,zero
   12a58:	0009883a 	mov	r4,zero
   12a5c:	000f883a 	mov	r7,zero
   12a60:	0012ce81 	jmpi	12ce8 <__register_exitproc>

00012a64 <exit>:
   12a64:	defffe04 	addi	sp,sp,-8
   12a68:	000b883a 	mov	r5,zero
   12a6c:	dc000015 	stw	r16,0(sp)
   12a70:	dfc00115 	stw	ra,4(sp)
   12a74:	2021883a 	mov	r16,r4
   12a78:	0012dfc0 	call	12dfc <__call_exitprocs>
   12a7c:	00800074 	movhi	r2,1
   12a80:	10919a04 	addi	r2,r2,18024
   12a84:	11000017 	ldw	r4,0(r2)
   12a88:	20800f17 	ldw	r2,60(r4)
   12a8c:	10000126 	beq	r2,zero,12a94 <exit+0x30>
   12a90:	103ee83a 	callr	r2
   12a94:	8009883a 	mov	r4,r16
   12a98:	0012f900 	call	12f90 <_exit>

00012a9c <memcmp>:
   12a9c:	01c000c4 	movi	r7,3
   12aa0:	3980192e 	bgeu	r7,r6,12b08 <memcmp+0x6c>
   12aa4:	2144b03a 	or	r2,r4,r5
   12aa8:	11c4703a 	and	r2,r2,r7
   12aac:	10000f26 	beq	r2,zero,12aec <memcmp+0x50>
   12ab0:	20800003 	ldbu	r2,0(r4)
   12ab4:	28c00003 	ldbu	r3,0(r5)
   12ab8:	10c0151e 	bne	r2,r3,12b10 <memcmp+0x74>
   12abc:	31bfff84 	addi	r6,r6,-2
   12ac0:	01ffffc4 	movi	r7,-1
   12ac4:	00000406 	br	12ad8 <memcmp+0x3c>
   12ac8:	20800003 	ldbu	r2,0(r4)
   12acc:	28c00003 	ldbu	r3,0(r5)
   12ad0:	31bfffc4 	addi	r6,r6,-1
   12ad4:	10c00e1e 	bne	r2,r3,12b10 <memcmp+0x74>
   12ad8:	21000044 	addi	r4,r4,1
   12adc:	29400044 	addi	r5,r5,1
   12ae0:	31fff91e 	bne	r6,r7,12ac8 <__alt_data_end+0xffff2ac8>
   12ae4:	0005883a 	mov	r2,zero
   12ae8:	f800283a 	ret
   12aec:	20c00017 	ldw	r3,0(r4)
   12af0:	28800017 	ldw	r2,0(r5)
   12af4:	1880041e 	bne	r3,r2,12b08 <memcmp+0x6c>
   12af8:	31bfff04 	addi	r6,r6,-4
   12afc:	21000104 	addi	r4,r4,4
   12b00:	29400104 	addi	r5,r5,4
   12b04:	39bff936 	bltu	r7,r6,12aec <__alt_data_end+0xffff2aec>
   12b08:	303fe91e 	bne	r6,zero,12ab0 <__alt_data_end+0xffff2ab0>
   12b0c:	003ff506 	br	12ae4 <__alt_data_end+0xffff2ae4>
   12b10:	10c5c83a 	sub	r2,r2,r3
   12b14:	f800283a 	ret

00012b18 <memcpy>:
   12b18:	deffff04 	addi	sp,sp,-4
   12b1c:	dc000015 	stw	r16,0(sp)
   12b20:	00c003c4 	movi	r3,15
   12b24:	2005883a 	mov	r2,r4
   12b28:	1980432e 	bgeu	r3,r6,12c38 <memcpy+0x120>
   12b2c:	2146b03a 	or	r3,r4,r5
   12b30:	18c000cc 	andi	r3,r3,3
   12b34:	1800421e 	bne	r3,zero,12c40 <memcpy+0x128>
   12b38:	343ffc04 	addi	r16,r6,-16
   12b3c:	8020d13a 	srli	r16,r16,4
   12b40:	28c00104 	addi	r3,r5,4
   12b44:	23400104 	addi	r13,r4,4
   12b48:	801e913a 	slli	r15,r16,4
   12b4c:	2b000204 	addi	r12,r5,8
   12b50:	22c00204 	addi	r11,r4,8
   12b54:	7bc00504 	addi	r15,r15,20
   12b58:	2a800304 	addi	r10,r5,12
   12b5c:	22400304 	addi	r9,r4,12
   12b60:	2bdf883a 	add	r15,r5,r15
   12b64:	2811883a 	mov	r8,r5
   12b68:	200f883a 	mov	r7,r4
   12b6c:	41000017 	ldw	r4,0(r8)
   12b70:	39c00404 	addi	r7,r7,16
   12b74:	18c00404 	addi	r3,r3,16
   12b78:	393ffc15 	stw	r4,-16(r7)
   12b7c:	1bbffc17 	ldw	r14,-16(r3)
   12b80:	6b400404 	addi	r13,r13,16
   12b84:	5ac00404 	addi	r11,r11,16
   12b88:	6bbffc15 	stw	r14,-16(r13)
   12b8c:	63800017 	ldw	r14,0(r12)
   12b90:	4a400404 	addi	r9,r9,16
   12b94:	42000404 	addi	r8,r8,16
   12b98:	5bbffc15 	stw	r14,-16(r11)
   12b9c:	53800017 	ldw	r14,0(r10)
   12ba0:	63000404 	addi	r12,r12,16
   12ba4:	52800404 	addi	r10,r10,16
   12ba8:	4bbffc15 	stw	r14,-16(r9)
   12bac:	1bffef1e 	bne	r3,r15,12b6c <__alt_data_end+0xffff2b6c>
   12bb0:	81c00044 	addi	r7,r16,1
   12bb4:	380e913a 	slli	r7,r7,4
   12bb8:	310003cc 	andi	r4,r6,15
   12bbc:	02c000c4 	movi	r11,3
   12bc0:	11c7883a 	add	r3,r2,r7
   12bc4:	29cb883a 	add	r5,r5,r7
   12bc8:	59001f2e 	bgeu	r11,r4,12c48 <memcpy+0x130>
   12bcc:	1813883a 	mov	r9,r3
   12bd0:	2811883a 	mov	r8,r5
   12bd4:	200f883a 	mov	r7,r4
   12bd8:	42800017 	ldw	r10,0(r8)
   12bdc:	4a400104 	addi	r9,r9,4
   12be0:	39ffff04 	addi	r7,r7,-4
   12be4:	4abfff15 	stw	r10,-4(r9)
   12be8:	42000104 	addi	r8,r8,4
   12bec:	59fffa36 	bltu	r11,r7,12bd8 <__alt_data_end+0xffff2bd8>
   12bf0:	213fff04 	addi	r4,r4,-4
   12bf4:	2008d0ba 	srli	r4,r4,2
   12bf8:	318000cc 	andi	r6,r6,3
   12bfc:	21000044 	addi	r4,r4,1
   12c00:	2109883a 	add	r4,r4,r4
   12c04:	2109883a 	add	r4,r4,r4
   12c08:	1907883a 	add	r3,r3,r4
   12c0c:	290b883a 	add	r5,r5,r4
   12c10:	30000626 	beq	r6,zero,12c2c <memcpy+0x114>
   12c14:	198d883a 	add	r6,r3,r6
   12c18:	29c00003 	ldbu	r7,0(r5)
   12c1c:	18c00044 	addi	r3,r3,1
   12c20:	29400044 	addi	r5,r5,1
   12c24:	19ffffc5 	stb	r7,-1(r3)
   12c28:	19bffb1e 	bne	r3,r6,12c18 <__alt_data_end+0xffff2c18>
   12c2c:	dc000017 	ldw	r16,0(sp)
   12c30:	dec00104 	addi	sp,sp,4
   12c34:	f800283a 	ret
   12c38:	2007883a 	mov	r3,r4
   12c3c:	003ff406 	br	12c10 <__alt_data_end+0xffff2c10>
   12c40:	2007883a 	mov	r3,r4
   12c44:	003ff306 	br	12c14 <__alt_data_end+0xffff2c14>
   12c48:	200d883a 	mov	r6,r4
   12c4c:	003ff006 	br	12c10 <__alt_data_end+0xffff2c10>

00012c50 <strlen>:
   12c50:	208000cc 	andi	r2,r4,3
   12c54:	10002026 	beq	r2,zero,12cd8 <strlen+0x88>
   12c58:	20800007 	ldb	r2,0(r4)
   12c5c:	10002026 	beq	r2,zero,12ce0 <strlen+0x90>
   12c60:	2005883a 	mov	r2,r4
   12c64:	00000206 	br	12c70 <strlen+0x20>
   12c68:	10c00007 	ldb	r3,0(r2)
   12c6c:	18001826 	beq	r3,zero,12cd0 <strlen+0x80>
   12c70:	10800044 	addi	r2,r2,1
   12c74:	10c000cc 	andi	r3,r2,3
   12c78:	183ffb1e 	bne	r3,zero,12c68 <__alt_data_end+0xffff2c68>
   12c7c:	10c00017 	ldw	r3,0(r2)
   12c80:	01ffbff4 	movhi	r7,65279
   12c84:	39ffbfc4 	addi	r7,r7,-257
   12c88:	00ca303a 	nor	r5,zero,r3
   12c8c:	01a02074 	movhi	r6,32897
   12c90:	19c7883a 	add	r3,r3,r7
   12c94:	31a02004 	addi	r6,r6,-32640
   12c98:	1946703a 	and	r3,r3,r5
   12c9c:	1986703a 	and	r3,r3,r6
   12ca0:	1800091e 	bne	r3,zero,12cc8 <strlen+0x78>
   12ca4:	10800104 	addi	r2,r2,4
   12ca8:	10c00017 	ldw	r3,0(r2)
   12cac:	19cb883a 	add	r5,r3,r7
   12cb0:	00c6303a 	nor	r3,zero,r3
   12cb4:	28c6703a 	and	r3,r5,r3
   12cb8:	1986703a 	and	r3,r3,r6
   12cbc:	183ff926 	beq	r3,zero,12ca4 <__alt_data_end+0xffff2ca4>
   12cc0:	00000106 	br	12cc8 <strlen+0x78>
   12cc4:	10800044 	addi	r2,r2,1
   12cc8:	10c00007 	ldb	r3,0(r2)
   12ccc:	183ffd1e 	bne	r3,zero,12cc4 <__alt_data_end+0xffff2cc4>
   12cd0:	1105c83a 	sub	r2,r2,r4
   12cd4:	f800283a 	ret
   12cd8:	2005883a 	mov	r2,r4
   12cdc:	003fe706 	br	12c7c <__alt_data_end+0xffff2c7c>
   12ce0:	0005883a 	mov	r2,zero
   12ce4:	f800283a 	ret

00012ce8 <__register_exitproc>:
   12ce8:	00800074 	movhi	r2,1
   12cec:	defffa04 	addi	sp,sp,-24
   12cf0:	10919a04 	addi	r2,r2,18024
   12cf4:	dc000315 	stw	r16,12(sp)
   12cf8:	14000017 	ldw	r16,0(r2)
   12cfc:	dc400415 	stw	r17,16(sp)
   12d00:	dfc00515 	stw	ra,20(sp)
   12d04:	80805217 	ldw	r2,328(r16)
   12d08:	2023883a 	mov	r17,r4
   12d0c:	10003626 	beq	r2,zero,12de8 <__register_exitproc+0x100>
   12d10:	10c00117 	ldw	r3,4(r2)
   12d14:	010007c4 	movi	r4,31
   12d18:	20c00e16 	blt	r4,r3,12d54 <__register_exitproc+0x6c>
   12d1c:	1a400044 	addi	r9,r3,1
   12d20:	8800211e 	bne	r17,zero,12da8 <__register_exitproc+0xc0>
   12d24:	18c00084 	addi	r3,r3,2
   12d28:	18c7883a 	add	r3,r3,r3
   12d2c:	18c7883a 	add	r3,r3,r3
   12d30:	12400115 	stw	r9,4(r2)
   12d34:	10c7883a 	add	r3,r2,r3
   12d38:	19400015 	stw	r5,0(r3)
   12d3c:	0005883a 	mov	r2,zero
   12d40:	dfc00517 	ldw	ra,20(sp)
   12d44:	dc400417 	ldw	r17,16(sp)
   12d48:	dc000317 	ldw	r16,12(sp)
   12d4c:	dec00604 	addi	sp,sp,24
   12d50:	f800283a 	ret
   12d54:	00800034 	movhi	r2,0
   12d58:	10800004 	addi	r2,r2,0
   12d5c:	10002526 	beq	r2,zero,12df4 <__register_exitproc+0x10c>
   12d60:	01006404 	movi	r4,400
   12d64:	d9400015 	stw	r5,0(sp)
   12d68:	d9800115 	stw	r6,4(sp)
   12d6c:	d9c00215 	stw	r7,8(sp)
   12d70:	00000000 	call	0 <__reset-0x10000>
   12d74:	d9400017 	ldw	r5,0(sp)
   12d78:	d9800117 	ldw	r6,4(sp)
   12d7c:	d9c00217 	ldw	r7,8(sp)
   12d80:	10001c26 	beq	r2,zero,12df4 <__register_exitproc+0x10c>
   12d84:	80c05217 	ldw	r3,328(r16)
   12d88:	10000115 	stw	zero,4(r2)
   12d8c:	02400044 	movi	r9,1
   12d90:	10c00015 	stw	r3,0(r2)
   12d94:	80805215 	stw	r2,328(r16)
   12d98:	10006215 	stw	zero,392(r2)
   12d9c:	10006315 	stw	zero,396(r2)
   12da0:	0007883a 	mov	r3,zero
   12da4:	883fdf26 	beq	r17,zero,12d24 <__alt_data_end+0xffff2d24>
   12da8:	18d1883a 	add	r8,r3,r3
   12dac:	4211883a 	add	r8,r8,r8
   12db0:	1211883a 	add	r8,r2,r8
   12db4:	41802215 	stw	r6,136(r8)
   12db8:	01000044 	movi	r4,1
   12dbc:	11806217 	ldw	r6,392(r2)
   12dc0:	20c8983a 	sll	r4,r4,r3
   12dc4:	310cb03a 	or	r6,r6,r4
   12dc8:	11806215 	stw	r6,392(r2)
   12dcc:	41c04215 	stw	r7,264(r8)
   12dd0:	01800084 	movi	r6,2
   12dd4:	89bfd31e 	bne	r17,r6,12d24 <__alt_data_end+0xffff2d24>
   12dd8:	11806317 	ldw	r6,396(r2)
   12ddc:	3108b03a 	or	r4,r6,r4
   12de0:	11006315 	stw	r4,396(r2)
   12de4:	003fcf06 	br	12d24 <__alt_data_end+0xffff2d24>
   12de8:	80805304 	addi	r2,r16,332
   12dec:	80805215 	stw	r2,328(r16)
   12df0:	003fc706 	br	12d10 <__alt_data_end+0xffff2d10>
   12df4:	00bfffc4 	movi	r2,-1
   12df8:	003fd106 	br	12d40 <__alt_data_end+0xffff2d40>

00012dfc <__call_exitprocs>:
   12dfc:	00800074 	movhi	r2,1
   12e00:	10919a04 	addi	r2,r2,18024
   12e04:	10800017 	ldw	r2,0(r2)
   12e08:	defff404 	addi	sp,sp,-48
   12e0c:	dd800815 	stw	r22,32(sp)
   12e10:	d8800015 	stw	r2,0(sp)
   12e14:	10805204 	addi	r2,r2,328
   12e18:	dd000615 	stw	r20,24(sp)
   12e1c:	dc800415 	stw	r18,16(sp)
   12e20:	dfc00b15 	stw	ra,44(sp)
   12e24:	df000a15 	stw	fp,40(sp)
   12e28:	ddc00915 	stw	r23,36(sp)
   12e2c:	dd400715 	stw	r21,28(sp)
   12e30:	dcc00515 	stw	r19,20(sp)
   12e34:	dc400315 	stw	r17,12(sp)
   12e38:	dc000215 	stw	r16,8(sp)
   12e3c:	2025883a 	mov	r18,r4
   12e40:	2829883a 	mov	r20,r5
   12e44:	d8800115 	stw	r2,4(sp)
   12e48:	05bfffc4 	movi	r22,-1
   12e4c:	d8800017 	ldw	r2,0(sp)
   12e50:	14c05217 	ldw	r19,328(r2)
   12e54:	98001d26 	beq	r19,zero,12ecc <__call_exitprocs+0xd0>
   12e58:	dd400117 	ldw	r21,4(sp)
   12e5c:	98800117 	ldw	r2,4(r19)
   12e60:	173fffc4 	addi	fp,r2,-1
   12e64:	e0000d16 	blt	fp,zero,12e9c <__call_exitprocs+0xa0>
   12e68:	14000044 	addi	r16,r2,1
   12e6c:	8421883a 	add	r16,r16,r16
   12e70:	8421883a 	add	r16,r16,r16
   12e74:	84402004 	addi	r17,r16,128
   12e78:	9c63883a 	add	r17,r19,r17
   12e7c:	9c21883a 	add	r16,r19,r16
   12e80:	a0001e26 	beq	r20,zero,12efc <__call_exitprocs+0x100>
   12e84:	80804017 	ldw	r2,256(r16)
   12e88:	15001c26 	beq	r2,r20,12efc <__call_exitprocs+0x100>
   12e8c:	e73fffc4 	addi	fp,fp,-1
   12e90:	843fff04 	addi	r16,r16,-4
   12e94:	8c7fff04 	addi	r17,r17,-4
   12e98:	e5bff91e 	bne	fp,r22,12e80 <__alt_data_end+0xffff2e80>
   12e9c:	00800034 	movhi	r2,0
   12ea0:	10800004 	addi	r2,r2,0
   12ea4:	10000926 	beq	r2,zero,12ecc <__call_exitprocs+0xd0>
   12ea8:	98800117 	ldw	r2,4(r19)
   12eac:	1000311e 	bne	r2,zero,12f74 <__call_exitprocs+0x178>
   12eb0:	98800017 	ldw	r2,0(r19)
   12eb4:	10003426 	beq	r2,zero,12f88 <__call_exitprocs+0x18c>
   12eb8:	9809883a 	mov	r4,r19
   12ebc:	a8800015 	stw	r2,0(r21)
   12ec0:	00000000 	call	0 <__reset-0x10000>
   12ec4:	acc00017 	ldw	r19,0(r21)
   12ec8:	983fe41e 	bne	r19,zero,12e5c <__alt_data_end+0xffff2e5c>
   12ecc:	dfc00b17 	ldw	ra,44(sp)
   12ed0:	df000a17 	ldw	fp,40(sp)
   12ed4:	ddc00917 	ldw	r23,36(sp)
   12ed8:	dd800817 	ldw	r22,32(sp)
   12edc:	dd400717 	ldw	r21,28(sp)
   12ee0:	dd000617 	ldw	r20,24(sp)
   12ee4:	dcc00517 	ldw	r19,20(sp)
   12ee8:	dc800417 	ldw	r18,16(sp)
   12eec:	dc400317 	ldw	r17,12(sp)
   12ef0:	dc000217 	ldw	r16,8(sp)
   12ef4:	dec00c04 	addi	sp,sp,48
   12ef8:	f800283a 	ret
   12efc:	98800117 	ldw	r2,4(r19)
   12f00:	80c00017 	ldw	r3,0(r16)
   12f04:	10bfffc4 	addi	r2,r2,-1
   12f08:	17001526 	beq	r2,fp,12f60 <__call_exitprocs+0x164>
   12f0c:	80000015 	stw	zero,0(r16)
   12f10:	183fde26 	beq	r3,zero,12e8c <__alt_data_end+0xffff2e8c>
   12f14:	00800044 	movi	r2,1
   12f18:	1708983a 	sll	r4,r2,fp
   12f1c:	98806217 	ldw	r2,392(r19)
   12f20:	9dc00117 	ldw	r23,4(r19)
   12f24:	2084703a 	and	r2,r4,r2
   12f28:	1000061e 	bne	r2,zero,12f44 <__call_exitprocs+0x148>
   12f2c:	183ee83a 	callr	r3
   12f30:	98800117 	ldw	r2,4(r19)
   12f34:	15ffc51e 	bne	r2,r23,12e4c <__alt_data_end+0xffff2e4c>
   12f38:	a8800017 	ldw	r2,0(r21)
   12f3c:	14ffd326 	beq	r2,r19,12e8c <__alt_data_end+0xffff2e8c>
   12f40:	003fc206 	br	12e4c <__alt_data_end+0xffff2e4c>
   12f44:	98806317 	ldw	r2,396(r19)
   12f48:	2084703a 	and	r2,r4,r2
   12f4c:	1000061e 	bne	r2,zero,12f68 <__call_exitprocs+0x16c>
   12f50:	89400017 	ldw	r5,0(r17)
   12f54:	9009883a 	mov	r4,r18
   12f58:	183ee83a 	callr	r3
   12f5c:	003ff406 	br	12f30 <__alt_data_end+0xffff2f30>
   12f60:	9f000115 	stw	fp,4(r19)
   12f64:	003fea06 	br	12f10 <__alt_data_end+0xffff2f10>
   12f68:	89000017 	ldw	r4,0(r17)
   12f6c:	183ee83a 	callr	r3
   12f70:	003fef06 	br	12f30 <__alt_data_end+0xffff2f30>
   12f74:	98800017 	ldw	r2,0(r19)
   12f78:	982b883a 	mov	r21,r19
   12f7c:	1027883a 	mov	r19,r2
   12f80:	983fb61e 	bne	r19,zero,12e5c <__alt_data_end+0xffff2e5c>
   12f84:	003fd106 	br	12ecc <__alt_data_end+0xffff2ecc>
   12f88:	0005883a 	mov	r2,zero
   12f8c:	003ffa06 	br	12f78 <__alt_data_end+0xffff2f78>

00012f90 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   12f90:	defffd04 	addi	sp,sp,-12
   12f94:	df000215 	stw	fp,8(sp)
   12f98:	df000204 	addi	fp,sp,8
   12f9c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   12fa0:	0001883a 	nop
   12fa4:	e0bfff17 	ldw	r2,-4(fp)
   12fa8:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   12fac:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   12fb0:	10000226 	beq	r2,zero,12fbc <_exit+0x2c>
    ALT_SIM_FAIL();
   12fb4:	002af070 	cmpltui	zero,zero,43969
   12fb8:	00000106 	br	12fc0 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   12fbc:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   12fc0:	003fff06 	br	12fc0 <__alt_data_end+0xffff2fc0>
