/*
 * interval_timer_driver.h
 *
 *  Created on: 2017-05-26
 *      Author: ak82770
 */

#ifndef INTERVAL_TIMER_DRIVER_H_
#define INTERVAL_TIMER_DRIVER_H_

#define TIMER_STAT_REG_OFT    0 //registre de statut
#define TIMER_CTRL_REG_OFT    1 //Registre de controle
#define TIMER_PERIODL_REG_OFT 2 //registre de periode, bits 15:0
#define TIMER_PERIODH_REG_OFT 3 //registre de periode, bits 31:16

/* Acces de base */
/* Le champ to du registre de status est mis a 1 lorsque le compteur atteint 0
 * et demeure a 1 jusqu'a ce que le processur ecrive un 0 sur ce champ.
 * il est possible de l'utiliser comme un tick que l'on verifiera periodiquement.
 * les macros suivantes servent a verifier et reinitialiser le champ to */

#define timer_read_tick(base) IORD(base, TIMER_STAT_REG_OFT) & 0X01)

#define timer_clear_tick(base) IOWR(base, TIMER_STAT_REG_OFT, 0)

/* routine de configuration */
/* cette fonction programme la periode et lance le compteur */
void timer_write_period(alt_u32 timer_base, alt_u32 period)
{
	alt_u16 high, low;

	/* separer la periode 32bits en 2 valeurs de 16 bits */
	high = (alt_u16) (period >> 16);
	low = (alt_u16) (period & 0x0000FFFF);

	/*ecrire la periode */
	IOWR(timer_base, TIMER_PERIODH_REG_OFT, high);
	IOWR(timer_base, TIMER_PERIODL_REG_OFT, low);

	/* configuration du timer pour demarrage, SANS le mode continu, SANS interrupt */
	IOWR(timer_base, TIMER_CTRL_REG_OFT, 0x0007); //bits 0, 1 ,2 actives
	// code a l'air d'etre correct afterall?
}

#endif /* INTERVAL_TIMER_DRIVER_H_ */
